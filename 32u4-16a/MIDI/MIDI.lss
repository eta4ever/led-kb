
MIDI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000d22  00000db6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010c  0080010c  00000dc2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dc2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000df4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ce4  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000130b  00000000  00000000  00005da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f6a  00000000  00000000  000070ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000708  00000000  00000000  0000a018  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002230  00000000  00000000  0000a720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e0f  00000000  00000000  0000c950  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a0  00000000  00000000  0000f75f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b0 c0       	rjmp	.+352    	; 0x162 <__ctors_end>
   2:	00 00       	nop
   4:	c9 c0       	rjmp	.+402    	; 0x198 <__bad_interrupt>
   6:	00 00       	nop
   8:	c7 c0       	rjmp	.+398    	; 0x198 <__bad_interrupt>
   a:	00 00       	nop
   c:	c5 c0       	rjmp	.+394    	; 0x198 <__bad_interrupt>
   e:	00 00       	nop
  10:	c3 c0       	rjmp	.+390    	; 0x198 <__bad_interrupt>
  12:	00 00       	nop
  14:	c1 c0       	rjmp	.+386    	; 0x198 <__bad_interrupt>
  16:	00 00       	nop
  18:	bf c0       	rjmp	.+382    	; 0x198 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	bd c0       	rjmp	.+378    	; 0x198 <__bad_interrupt>
  1e:	00 00       	nop
  20:	bb c0       	rjmp	.+374    	; 0x198 <__bad_interrupt>
  22:	00 00       	nop
  24:	b9 c0       	rjmp	.+370    	; 0x198 <__bad_interrupt>
  26:	00 00       	nop
  28:	e3 c3       	rjmp	.+1990   	; 0x7f0 <__vector_10>
  2a:	00 00       	nop
  2c:	b5 c0       	rjmp	.+362    	; 0x198 <__bad_interrupt>
  2e:	00 00       	nop
  30:	b3 c0       	rjmp	.+358    	; 0x198 <__bad_interrupt>
  32:	00 00       	nop
  34:	b1 c0       	rjmp	.+354    	; 0x198 <__bad_interrupt>
  36:	00 00       	nop
  38:	af c0       	rjmp	.+350    	; 0x198 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ad c0       	rjmp	.+346    	; 0x198 <__bad_interrupt>
  3e:	00 00       	nop
  40:	ab c0       	rjmp	.+342    	; 0x198 <__bad_interrupt>
  42:	00 00       	nop
  44:	a9 c0       	rjmp	.+338    	; 0x198 <__bad_interrupt>
  46:	00 00       	nop
  48:	a7 c0       	rjmp	.+334    	; 0x198 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a5 c0       	rjmp	.+330    	; 0x198 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a3 c0       	rjmp	.+326    	; 0x198 <__bad_interrupt>
  52:	00 00       	nop
  54:	a1 c0       	rjmp	.+322    	; 0x198 <__bad_interrupt>
  56:	00 00       	nop
  58:	9f c0       	rjmp	.+318    	; 0x198 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9d c0       	rjmp	.+314    	; 0x198 <__bad_interrupt>
  5e:	00 00       	nop
  60:	9b c0       	rjmp	.+310    	; 0x198 <__bad_interrupt>
  62:	00 00       	nop
  64:	99 c0       	rjmp	.+306    	; 0x198 <__bad_interrupt>
  66:	00 00       	nop
  68:	97 c0       	rjmp	.+302    	; 0x198 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	95 c0       	rjmp	.+298    	; 0x198 <__bad_interrupt>
  6e:	00 00       	nop
  70:	93 c0       	rjmp	.+294    	; 0x198 <__bad_interrupt>
  72:	00 00       	nop
  74:	91 c0       	rjmp	.+290    	; 0x198 <__bad_interrupt>
  76:	00 00       	nop
  78:	8f c0       	rjmp	.+286    	; 0x198 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8d c0       	rjmp	.+282    	; 0x198 <__bad_interrupt>
  7e:	00 00       	nop
  80:	8b c0       	rjmp	.+278    	; 0x198 <__bad_interrupt>
  82:	00 00       	nop
  84:	89 c0       	rjmp	.+274    	; 0x198 <__bad_interrupt>
  86:	00 00       	nop
  88:	87 c0       	rjmp	.+270    	; 0x198 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	85 c0       	rjmp	.+266    	; 0x198 <__bad_interrupt>
  8e:	00 00       	nop
  90:	83 c0       	rjmp	.+262    	; 0x198 <__bad_interrupt>
  92:	00 00       	nop
  94:	81 c0       	rjmp	.+258    	; 0x198 <__bad_interrupt>
  96:	00 00       	nop
  98:	7f c0       	rjmp	.+254    	; 0x198 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	7d c0       	rjmp	.+250    	; 0x198 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	7b c0       	rjmp	.+246    	; 0x198 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	79 c0       	rjmp	.+242    	; 0x198 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	77 c0       	rjmp	.+238    	; 0x198 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <ProductString>:
  ac:	1e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 49 00     ..L.U.F.A. .M.I.
  bc:	44 00 49 00 20 00 44 00 65 00 6d 00 6f 00 00 00     D.I. .D.e.m.o...

000000cc <ManufacturerString>:
  cc:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  dc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e6 <LanguageString>:
  e6:	04 03 09 04                                         ....

000000ea <ConfigurationDescriptor>:
  ea:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
  fa:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
 10a:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
 11a:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
 12a:	09 24 03 02 04 01 01 01 00 09 05 01 02 40 00 05     .$...........@..
 13a:	00 00 05 25 01 01 01 09 05 82 02 40 00 05 00 00     ...%.......@....
 14a:	05 25 01 01 03                                      .%...

0000014f <DeviceDescriptor>:
 14f:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
 15f:	00 01 00                                            ...

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	da e0       	ldi	r29, 0x0A	; 10
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	e2 e2       	ldi	r30, 0x22	; 34
 176:	fd e0       	ldi	r31, 0x0D	; 13
 178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
 17a:	05 90       	lpm	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	ac 30       	cpi	r26, 0x0C	; 12
 180:	b1 07       	cpc	r27, r17
 182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	ac e0       	ldi	r26, 0x0C	; 12
 188:	b1 e0       	ldi	r27, 0x01	; 1
 18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
 18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
 18e:	a9 31       	cpi	r26, 0x19	; 25
 190:	b2 07       	cpc	r27, r18
 192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
 194:	77 d0       	rcall	.+238    	; 0x284 <main>
 196:	c3 c5       	rjmp	.+2950   	; 0xd1e <_exit>

00000198 <__bad_interrupt>:
 198:	33 cf       	rjmp	.-410    	; 0x0 <__vectors>

0000019a <cc_send>:
// 	MIDI_Device_Flush(&Keyboard_MIDI_Interface);
// }

// отправить в кабель 0 инструмент instr CONTROL CHANGE с заданным vel
void cc_send(instr, vel)
{
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	00 d0       	rcall	.+0      	; 0x1a0 <cc_send+0x6>
 1a0:	00 d0       	rcall	.+0      	; 0x1a2 <cc_send+0x8>
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
	MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t) // сформировать пакет
 1a6:	9b e0       	ldi	r25, 0x0B	; 11
 1a8:	99 83       	std	Y+1, r25	; 0x01
 1aa:	90 eb       	ldi	r25, 0xB0	; 176
 1ac:	9a 83       	std	Y+2, r25	; 0x02
 1ae:	8b 83       	std	Y+3, r24	; 0x03
 1b0:	6c 83       	std	Y+4, r22	; 0x04
				.Data1       = MIDI_COMMAND_CONTROL_CHANGE | MIDI_CHANNEL(1), // канал 1
				.Data2       = instr, 
				.Data3       = vel, 
			};

			MIDI_Device_SendEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent); // отправить пакет
 1b2:	be 01       	movw	r22, r28
 1b4:	6f 5f       	subi	r22, 0xFF	; 255
 1b6:	7f 4f       	sbci	r23, 0xFF	; 255
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	63 d5       	rcall	.+2758   	; 0xc84 <MIDI_Device_SendEventPacket>
			MIDI_Device_Flush(&Keyboard_MIDI_Interface);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	82 d5       	rcall	.+2820   	; 0xcc8 <MIDI_Device_Flush>
}
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <MUX_address>:

/** установить адрес входа мультиплексора */
void MUX_address(uint8_t address)
{
	if (address & 0b0001) PORTF |= (1<<PF4); else PORTF &= ~(1<<PF4);
 1d2:	80 ff       	sbrs	r24, 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <MUX_address+0x8>
 1d6:	8c 9a       	sbi	0x11, 4	; 17
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <MUX_address+0xa>
 1da:	8c 98       	cbi	0x11, 4	; 17
	if (address & 0b0010) PORTF |= (1<<PF5); else PORTF &= ~(1<<PF5);
 1dc:	81 ff       	sbrs	r24, 1
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <MUX_address+0x12>
 1e0:	8d 9a       	sbi	0x11, 5	; 17
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <MUX_address+0x14>
 1e4:	8d 98       	cbi	0x11, 5	; 17
	if (address & 0b0100) PORTF |= (1<<PF6); else PORTF &= ~(1<<PF6);
 1e6:	82 ff       	sbrs	r24, 2
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <MUX_address+0x1c>
 1ea:	8e 9a       	sbi	0x11, 6	; 17
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <MUX_address+0x1e>
 1ee:	8e 98       	cbi	0x11, 6	; 17
	if (address & 0b1000) PORTF |= (1<<PB6); else PORTF &= ~(1<<PB6);
 1f0:	83 ff       	sbrs	r24, 3
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <MUX_address+0x26>
 1f4:	8e 9a       	sbi	0x11, 6	; 17
 1f6:	08 95       	ret
 1f8:	8e 98       	cbi	0x11, 6	; 17
 1fa:	08 95       	ret

000001fc <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1fc:	84 b7       	in	r24, 0x34	; 52
 1fe:	87 7f       	andi	r24, 0xF7	; 247
 200:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	a8 95       	wdr
 208:	80 91 60 00 	lds	r24, 0x0060
 20c:	88 61       	ori	r24, 0x18	; 24
 20e:	80 93 60 00 	sts	0x0060, r24
 212:	10 92 60 00 	sts	0x0060, r1
 216:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	80 e8       	ldi	r24, 0x80	; 128
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	80 93 61 00 	sts	0x0061, r24
 224:	90 93 61 00 	sts	0x0061, r25
 228:	0f be       	out	0x3f, r0	; 63
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	//LEDs_Init();
	USB_Init();
 22a:	c5 d2       	rcall	.+1418   	; 0x7b6 <USB_Init>

	// ----------------D2 (PD1) вход кнопки, D3 (PD0) выход на светодиод
	// PB6, PF6, PF5, PF4 - выходы адреса мультиплексора, PF4-S0 ... PB6-S3
	// PB5 - выход разрешения мультиплексора (активный низкий)
	DDRB |= (1<<PB5) | (1<<PB6);
 22c:	84 b1       	in	r24, 0x04	; 4
 22e:	80 66       	ori	r24, 0x60	; 96
 230:	84 b9       	out	0x04, r24	; 4
	DDRF |= (1<<PF6) | (1<<PF5) | (1<<PF4);
 232:	80 b3       	in	r24, 0x10	; 16
 234:	80 67       	ori	r24, 0x70	; 112
 236:	80 bb       	out	0x10, r24	; 16

	// DDRD &= ~(1 << PD1);

	// разрешить работу мультиплексора
	PORTB &= ~(1<<PB5);
 238:	2d 98       	cbi	0x05, 5	; 5
	
	// ---------------- настройка АЦП------------------------------------------

	ADMUX &= ~((1 << REFS1)); // REFS0 = 1, REFS1 = 0 - используется AVCC, оно VCC (на Pro Micro)
 23a:	ec e7       	ldi	r30, 0x7C	; 124
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	8f 77       	andi	r24, 0x7F	; 127
 242:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);
 244:	80 81       	ld	r24, Z
 246:	80 64       	ori	r24, 0x40	; 64
 248:	80 83       	st	Z, r24

	ADMUX &= ~((1 << MUX5) | (1 << MUX4) | (1 << MUX3)); // 000111 - выбор ADC7 без извращений (A0 на Pro Micro)
 24a:	80 81       	ld	r24, Z
 24c:	87 7c       	andi	r24, 0xC7	; 199
 24e:	80 83       	st	Z, r24
	ADMUX |= ((1<< MUX2) | (1<< MUX1) | (1<< MUX0));
 250:	80 81       	ld	r24, Z
 252:	87 60       	ori	r24, 0x07	; 7
 254:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 111 делитель 128, частота АЦП 16000/128 = 125 КГц
 256:	ea e7       	ldi	r30, 0x7A	; 122
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	87 60       	ori	r24, 0x07	; 7
 25e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); // включение АЦП
 260:	80 81       	ld	r24, Z
 262:	80 68       	ori	r24, 0x80	; 128
 264:	80 83       	st	Z, r24
 266:	08 95       	ret

00000268 <raw_ADC>:
}

// считать АЦП
int raw_ADC(void)
{
	ADCSRA |= (1 << ADSC); // начать преобразование
 268:	80 91 7a 00 	lds	r24, 0x007A
 26c:	80 64       	ori	r24, 0x40	; 64
 26e:	80 93 7a 00 	sts	0x007A, r24
	while (ADCSRA & (1 << ADSC)); // ждать сброса бита - окончания преобразования
 272:	80 91 7a 00 	lds	r24, 0x007A
 276:	86 fd       	sbrc	r24, 6
 278:	fc cf       	rjmp	.-8      	; 0x272 <raw_ADC+0xa>
	return ADC;
 27a:	80 91 78 00 	lds	r24, 0x0078
 27e:	90 91 79 00 	lds	r25, 0x0079
}
 282:	08 95       	ret

00000284 <main>:

*/


int main(void)
{
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	a0 97       	sbiw	r28, 0x20	; 32
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	de bf       	out	0x3e, r29	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
 298:	b1 df       	rcall	.-158    	; 0x1fc <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 29a:	78 94       	sei
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
 29c:	ce 01       	movw	r24, r28
 29e:	81 96       	adiw	r24, 0x21	; 33
 2a0:	fe 01       	movw	r30, r28
 2a2:	31 96       	adiw	r30, 0x01	; 1

	uint16_t ADC_current[16]; // текущие значения АЦП
	uint16_t ADC_previous[16]; // предыдущие значения АЦП
	uint8_t ADC_deviation = 7; // порог фиксации изменения АЦП, давить шум

	for (uint8_t i=0; i<16; i++) { ADC_current[i] = 0; ADC_previous[i] = 0;} // обнуление
 2a4:	11 92       	st	Z+, r1
 2a6:	11 92       	st	Z+, r1
 2a8:	e8 17       	cp	r30, r24
 2aa:	f9 07       	cpc	r31, r25
 2ac:	d9 f7       	brne	.-10     	; 0x2a4 <main+0x20>
 2ae:	ce 01       	movw	r24, r28
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	7c 01       	movw	r14, r24
 2b4:	00 e0       	ldi	r16, 0x00	; 0
 2b6:	10 e0       	ldi	r17, 0x00	; 0
	for (;;)
	{
		// опрос 16 входов мультиплексора
		for (uint8_t MUX_pos = 0; MUX_pos < 16; MUX_pos++ ){

				MUX_address(MUX_pos); // установить адрес
 2b8:	c8 01       	movw	r24, r16
 2ba:	8b df       	rcall	.-234    	; 0x1d2 <MUX_address>
				
				ADC_current[MUX_pos] = raw_ADC(); // АЦП
 2bc:	d5 df       	rcall	.-86     	; 0x268 <raw_ADC>
 2be:	6c 01       	movw	r12, r24
				if ( abs(ADC_current[MUX_pos] - ADC_previous[MUX_pos]) >= ADC_deviation ) // если изменения больше порога, отправить сообщение CC
 2c0:	f7 01       	movw	r30, r14
 2c2:	80 81       	ld	r24, Z
 2c4:	91 81       	ldd	r25, Z+1	; 0x01
 2c6:	96 01       	movw	r18, r12
 2c8:	28 1b       	sub	r18, r24
 2ca:	39 0b       	sbc	r19, r25
 2cc:	37 ff       	sbrs	r19, 7
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <main+0x52>
 2d0:	31 95       	neg	r19
 2d2:	21 95       	neg	r18
 2d4:	31 09       	sbc	r19, r1
 2d6:	27 30       	cpi	r18, 0x07	; 7
 2d8:	31 05       	cpc	r19, r1
 2da:	64 f0       	brlt	.+24     	; 0x2f4 <main+0x70>
				{
					cc_send(2, ADC_current[MUX_pos] / 8);
 2dc:	b6 01       	movw	r22, r12
 2de:	83 e0       	ldi	r24, 0x03	; 3
 2e0:	76 95       	lsr	r23
 2e2:	67 95       	ror	r22
 2e4:	8a 95       	dec	r24
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <main+0x5c>
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	56 df       	rcall	.-340    	; 0x19a <cc_send>
					ADC_previous[MUX_pos] = ADC_current[MUX_pos];
 2ee:	f7 01       	movw	r30, r14
 2f0:	d1 82       	std	Z+1, r13	; 0x01
 2f2:	c0 82       	st	Z, r12
				}

				MIDI_Device_USBTask(&Keyboard_MIDI_Interface);
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	02 d5       	rcall	.+2564   	; 0xcfe <MIDI_Device_USBTask>
				USB_USBTask();
 2fa:	93 d4       	rcall	.+2342   	; 0xc22 <USB_USBTask>
 2fc:	0f 5f       	subi	r16, 0xFF	; 255
 2fe:	1f 4f       	sbci	r17, 0xFF	; 255
 300:	f2 e0       	ldi	r31, 0x02	; 2
 302:	ef 0e       	add	r14, r31
 304:	f1 1c       	adc	r15, r1
	for (uint8_t i=0; i<16; i++) { ADC_current[i] = 0; ADC_previous[i] = 0;} // обнуление

	for (;;)
	{
		// опрос 16 входов мультиплексора
		for (uint8_t MUX_pos = 0; MUX_pos < 16; MUX_pos++ ){
 306:	00 31       	cpi	r16, 0x10	; 16
 308:	11 05       	cpc	r17, r1
 30a:	b1 f6       	brne	.-84     	; 0x2b8 <main+0x34>
 30c:	d0 cf       	rjmp	.-96     	; 0x2ae <main+0x2a>

0000030e <EVENT_USB_Device_Connect>:
// }


/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
 30e:	08 95       	ret

00000310 <EVENT_USB_Device_Disconnect>:
	// LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
 310:	08 95       	ret

00000312 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MIDI_Device_ConfigureEndpoints(&Keyboard_MIDI_Interface);
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	9f c4       	rjmp	.+2366   	; 0xc56 <MIDI_Device_ConfigureEndpoints>

00000318 <EVENT_USB_Device_ControlRequest>:
	// LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
 318:	08 95       	ret

0000031a <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 31a:	29 2f       	mov	r18, r25
 31c:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 31e:	22 30       	cpi	r18, 0x02	; 2
 320:	31 05       	cpc	r19, r1
 322:	59 f0       	breq	.+22     	; 0x33a <CALLBACK_USB_GetDescriptor+0x20>
 324:	23 30       	cpi	r18, 0x03	; 3
 326:	31 05       	cpc	r19, r1
 328:	69 f0       	breq	.+26     	; 0x344 <CALLBACK_USB_GetDescriptor+0x2a>
 32a:	21 30       	cpi	r18, 0x01	; 1
 32c:	31 05       	cpc	r19, r1
 32e:	f9 f4       	brne	.+62     	; 0x36e <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 330:	82 e1       	ldi	r24, 0x12	; 18
 332:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 334:	2f e4       	ldi	r18, 0x4F	; 79
 336:	31 e0       	ldi	r19, 0x01	; 1
 338:	1e c0       	rjmp	.+60     	; 0x376 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 33a:	85 e6       	ldi	r24, 0x65	; 101
 33c:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 33e:	2a ee       	ldi	r18, 0xEA	; 234
 340:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 342:	19 c0       	rjmp	.+50     	; 0x376 <CALLBACK_USB_GetDescriptor+0x5c>
 344:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	91 05       	cpc	r25, r1
 34a:	41 f0       	breq	.+16     	; 0x35c <CALLBACK_USB_GetDescriptor+0x42>
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	91 05       	cpc	r25, r1
 350:	41 f0       	breq	.+16     	; 0x362 <CALLBACK_USB_GetDescriptor+0x48>
 352:	89 2b       	or	r24, r25
 354:	61 f4       	brne	.+24     	; 0x36e <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 356:	e6 ee       	ldi	r30, 0xE6	; 230
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	05 c0       	rjmp	.+10     	; 0x366 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 35c:	ec ec       	ldi	r30, 0xCC	; 204
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 362:	ec ea       	ldi	r30, 0xAC	; 172
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	84 91       	lpm	r24, Z
 368:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 36a:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 36c:	04 c0       	rjmp	.+8      	; 0x376 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 372:	20 e0       	ldi	r18, 0x00	; 0
 374:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 376:	fa 01       	movw	r30, r20
 378:	31 83       	std	Z+1, r19	; 0x01
 37a:	20 83       	st	Z, r18
	return Size;
}
 37c:	08 95       	ret

0000037e <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 37e:	cf 92       	push	r12
 380:	df 92       	push	r13
 382:	ef 92       	push	r14
 384:	ff 92       	push	r15
 386:	0f 93       	push	r16
 388:	1f 93       	push	r17
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	ec 01       	movw	r28, r24
 390:	8b 01       	movw	r16, r22
 392:	7a 01       	movw	r14, r20
 394:	9e d1       	rcall	.+828    	; 0x6d2 <Endpoint_WaitUntilReady>
 396:	81 11       	cpse	r24, r1
 398:	33 c0       	rjmp	.+102    	; 0x400 <Endpoint_Write_Stream_LE+0x82>
 39a:	e1 14       	cp	r14, r1
 39c:	f1 04       	cpc	r15, r1
 39e:	39 f0       	breq	.+14     	; 0x3ae <Endpoint_Write_Stream_LE+0x30>
 3a0:	f7 01       	movw	r30, r14
 3a2:	80 81       	ld	r24, Z
 3a4:	91 81       	ldd	r25, Z+1	; 0x01
 3a6:	08 1b       	sub	r16, r24
 3a8:	19 0b       	sbc	r17, r25
 3aa:	c8 0f       	add	r28, r24
 3ac:	d9 1f       	adc	r29, r25
 3ae:	c1 2c       	mov	r12, r1
 3b0:	d1 2c       	mov	r13, r1
 3b2:	01 15       	cp	r16, r1
 3b4:	11 05       	cpc	r17, r1
 3b6:	19 f1       	breq	.+70     	; 0x3fe <Endpoint_Write_Stream_LE+0x80>
 3b8:	80 91 e8 00 	lds	r24, 0x00E8
 3bc:	85 fd       	sbrc	r24, 5
 3be:	16 c0       	rjmp	.+44     	; 0x3ec <Endpoint_Write_Stream_LE+0x6e>
 3c0:	80 91 e8 00 	lds	r24, 0x00E8
 3c4:	8e 77       	andi	r24, 0x7E	; 126
 3c6:	80 93 e8 00 	sts	0x00E8, r24
 3ca:	2b d4       	rcall	.+2134   	; 0xc22 <USB_USBTask>
 3cc:	e1 14       	cp	r14, r1
 3ce:	f1 04       	cpc	r15, r1
 3d0:	49 f0       	breq	.+18     	; 0x3e4 <Endpoint_Write_Stream_LE+0x66>
 3d2:	f7 01       	movw	r30, r14
 3d4:	80 81       	ld	r24, Z
 3d6:	91 81       	ldd	r25, Z+1	; 0x01
 3d8:	c8 0e       	add	r12, r24
 3da:	d9 1e       	adc	r13, r25
 3dc:	d1 82       	std	Z+1, r13	; 0x01
 3de:	c0 82       	st	Z, r12
 3e0:	85 e0       	ldi	r24, 0x05	; 5
 3e2:	0e c0       	rjmp	.+28     	; 0x400 <Endpoint_Write_Stream_LE+0x82>
 3e4:	76 d1       	rcall	.+748    	; 0x6d2 <Endpoint_WaitUntilReady>
 3e6:	88 23       	and	r24, r24
 3e8:	21 f3       	breq	.-56     	; 0x3b2 <Endpoint_Write_Stream_LE+0x34>
 3ea:	0a c0       	rjmp	.+20     	; 0x400 <Endpoint_Write_Stream_LE+0x82>
 3ec:	89 91       	ld	r24, Y+
 3ee:	80 93 f1 00 	sts	0x00F1, r24
 3f2:	01 50       	subi	r16, 0x01	; 1
 3f4:	11 09       	sbc	r17, r1
 3f6:	ff ef       	ldi	r31, 0xFF	; 255
 3f8:	cf 1a       	sub	r12, r31
 3fa:	df 0a       	sbc	r13, r31
 3fc:	da cf       	rjmp	.-76     	; 0x3b2 <Endpoint_Write_Stream_LE+0x34>
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
 408:	ff 90       	pop	r15
 40a:	ef 90       	pop	r14
 40c:	df 90       	pop	r13
 40e:	cf 90       	pop	r12
 410:	08 95       	ret

00000412 <Endpoint_Write_Control_Stream_LE>:
 412:	20 91 17 01 	lds	r18, 0x0117
 416:	30 91 18 01 	lds	r19, 0x0118
 41a:	26 17       	cp	r18, r22
 41c:	37 07       	cpc	r19, r23
 41e:	48 f0       	brcs	.+18     	; 0x432 <Endpoint_Write_Control_Stream_LE+0x20>
 420:	61 15       	cp	r22, r1
 422:	71 05       	cpc	r23, r1
 424:	39 f4       	brne	.+14     	; 0x434 <Endpoint_Write_Control_Stream_LE+0x22>
 426:	20 91 e8 00 	lds	r18, 0x00E8
 42a:	2e 77       	andi	r18, 0x7E	; 126
 42c:	20 93 e8 00 	sts	0x00E8, r18
 430:	01 c0       	rjmp	.+2      	; 0x434 <Endpoint_Write_Control_Stream_LE+0x22>
 432:	b9 01       	movw	r22, r18
 434:	40 e0       	ldi	r20, 0x00	; 0
 436:	61 15       	cp	r22, r1
 438:	71 05       	cpc	r23, r1
 43a:	a9 f1       	breq	.+106    	; 0x4a6 <Endpoint_Write_Control_Stream_LE+0x94>
 43c:	20 91 10 01 	lds	r18, 0x0110
 440:	22 23       	and	r18, r18
 442:	09 f4       	brne	.+2      	; 0x446 <Endpoint_Write_Control_Stream_LE+0x34>
 444:	43 c0       	rjmp	.+134    	; 0x4cc <Endpoint_Write_Control_Stream_LE+0xba>
 446:	25 30       	cpi	r18, 0x05	; 5
 448:	09 f4       	brne	.+2      	; 0x44c <Endpoint_Write_Control_Stream_LE+0x3a>
 44a:	42 c0       	rjmp	.+132    	; 0x4d0 <Endpoint_Write_Control_Stream_LE+0xbe>
 44c:	20 91 e8 00 	lds	r18, 0x00E8
 450:	23 fd       	sbrc	r18, 3
 452:	40 c0       	rjmp	.+128    	; 0x4d4 <Endpoint_Write_Control_Stream_LE+0xc2>
 454:	20 91 e8 00 	lds	r18, 0x00E8
 458:	22 fd       	sbrc	r18, 2
 45a:	32 c0       	rjmp	.+100    	; 0x4c0 <Endpoint_Write_Control_Stream_LE+0xae>
 45c:	20 91 e8 00 	lds	r18, 0x00E8
 460:	20 ff       	sbrs	r18, 0
 462:	e9 cf       	rjmp	.-46     	; 0x436 <Endpoint_Write_Control_Stream_LE+0x24>
 464:	40 91 f3 00 	lds	r20, 0x00F3
 468:	20 91 f2 00 	lds	r18, 0x00F2
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	34 2b       	or	r19, r20
 470:	fc 01       	movw	r30, r24
 472:	cf 01       	movw	r24, r30
 474:	61 15       	cp	r22, r1
 476:	71 05       	cpc	r23, r1
 478:	59 f0       	breq	.+22     	; 0x490 <Endpoint_Write_Control_Stream_LE+0x7e>
 47a:	28 30       	cpi	r18, 0x08	; 8
 47c:	31 05       	cpc	r19, r1
 47e:	40 f4       	brcc	.+16     	; 0x490 <Endpoint_Write_Control_Stream_LE+0x7e>
 480:	81 91       	ld	r24, Z+
 482:	80 93 f1 00 	sts	0x00F1, r24
 486:	61 50       	subi	r22, 0x01	; 1
 488:	71 09       	sbc	r23, r1
 48a:	2f 5f       	subi	r18, 0xFF	; 255
 48c:	3f 4f       	sbci	r19, 0xFF	; 255
 48e:	f1 cf       	rjmp	.-30     	; 0x472 <Endpoint_Write_Control_Stream_LE+0x60>
 490:	41 e0       	ldi	r20, 0x01	; 1
 492:	28 30       	cpi	r18, 0x08	; 8
 494:	31 05       	cpc	r19, r1
 496:	09 f0       	breq	.+2      	; 0x49a <Endpoint_Write_Control_Stream_LE+0x88>
 498:	40 e0       	ldi	r20, 0x00	; 0
 49a:	20 91 e8 00 	lds	r18, 0x00E8
 49e:	2e 77       	andi	r18, 0x7E	; 126
 4a0:	20 93 e8 00 	sts	0x00E8, r18
 4a4:	c8 cf       	rjmp	.-112    	; 0x436 <Endpoint_Write_Control_Stream_LE+0x24>
 4a6:	41 11       	cpse	r20, r1
 4a8:	c9 cf       	rjmp	.-110    	; 0x43c <Endpoint_Write_Control_Stream_LE+0x2a>
 4aa:	0a c0       	rjmp	.+20     	; 0x4c0 <Endpoint_Write_Control_Stream_LE+0xae>
 4ac:	80 91 10 01 	lds	r24, 0x0110
 4b0:	88 23       	and	r24, r24
 4b2:	61 f0       	breq	.+24     	; 0x4cc <Endpoint_Write_Control_Stream_LE+0xba>
 4b4:	85 30       	cpi	r24, 0x05	; 5
 4b6:	61 f0       	breq	.+24     	; 0x4d0 <Endpoint_Write_Control_Stream_LE+0xbe>
 4b8:	80 91 e8 00 	lds	r24, 0x00E8
 4bc:	83 fd       	sbrc	r24, 3
 4be:	0a c0       	rjmp	.+20     	; 0x4d4 <Endpoint_Write_Control_Stream_LE+0xc2>
 4c0:	80 91 e8 00 	lds	r24, 0x00E8
 4c4:	82 ff       	sbrs	r24, 2
 4c6:	f2 cf       	rjmp	.-28     	; 0x4ac <Endpoint_Write_Control_Stream_LE+0x9a>
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	08 95       	ret
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	08 95       	ret
 4d0:	83 e0       	ldi	r24, 0x03	; 3
 4d2:	08 95       	ret
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	08 95       	ret

000004d8 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 4d8:	20 91 17 01 	lds	r18, 0x0117
 4dc:	30 91 18 01 	lds	r19, 0x0118
 4e0:	26 17       	cp	r18, r22
 4e2:	37 07       	cpc	r19, r23
 4e4:	48 f0       	brcs	.+18     	; 0x4f8 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 4e6:	61 15       	cp	r22, r1
 4e8:	71 05       	cpc	r23, r1
 4ea:	39 f4       	brne	.+14     	; 0x4fa <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4ec:	20 91 e8 00 	lds	r18, 0x00E8
 4f0:	2e 77       	andi	r18, 0x7E	; 126
 4f2:	20 93 e8 00 	sts	0x00E8, r18
 4f6:	01 c0       	rjmp	.+2      	; 0x4fa <Endpoint_Write_Control_PStream_LE+0x22>
 4f8:	b9 01       	movw	r22, r18
 4fa:	fc 01       	movw	r30, r24
 4fc:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 4fe:	61 15       	cp	r22, r1
 500:	71 05       	cpc	r23, r1
 502:	91 f1       	breq	.+100    	; 0x568 <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 504:	80 91 10 01 	lds	r24, 0x0110

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 508:	88 23       	and	r24, r24
 50a:	09 f4       	brne	.+2      	; 0x50e <Endpoint_Write_Control_PStream_LE+0x36>
 50c:	40 c0       	rjmp	.+128    	; 0x58e <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 50e:	85 30       	cpi	r24, 0x05	; 5
 510:	09 f4       	brne	.+2      	; 0x514 <Endpoint_Write_Control_PStream_LE+0x3c>
 512:	3f c0       	rjmp	.+126    	; 0x592 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 514:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 518:	83 fd       	sbrc	r24, 3
 51a:	3d c0       	rjmp	.+122    	; 0x596 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 51c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 520:	82 fd       	sbrc	r24, 2
 522:	2f c0       	rjmp	.+94     	; 0x582 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 524:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 528:	80 ff       	sbrs	r24, 0
 52a:	e9 cf       	rjmp	.-46     	; 0x4fe <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 52c:	20 91 f3 00 	lds	r18, 0x00F3
 530:	80 91 f2 00 	lds	r24, 0x00F2
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 538:	61 15       	cp	r22, r1
 53a:	71 05       	cpc	r23, r1
 53c:	59 f0       	breq	.+22     	; 0x554 <Endpoint_Write_Control_PStream_LE+0x7c>
 53e:	88 30       	cpi	r24, 0x08	; 8
 540:	91 05       	cpc	r25, r1
 542:	40 f4       	brcc	.+16     	; 0x554 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 544:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 546:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 54a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 54c:	61 50       	subi	r22, 0x01	; 1
 54e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	f2 cf       	rjmp	.-28     	; 0x538 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 554:	21 e0       	ldi	r18, 0x01	; 1
 556:	08 97       	sbiw	r24, 0x08	; 8
 558:	09 f0       	breq	.+2      	; 0x55c <Endpoint_Write_Control_PStream_LE+0x84>
 55a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 55c:	80 91 e8 00 	lds	r24, 0x00E8
 560:	8e 77       	andi	r24, 0x7E	; 126
 562:	80 93 e8 00 	sts	0x00E8, r24
 566:	cb cf       	rjmp	.-106    	; 0x4fe <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 568:	21 11       	cpse	r18, r1
 56a:	cc cf       	rjmp	.-104    	; 0x504 <Endpoint_Write_Control_PStream_LE+0x2c>
 56c:	0a c0       	rjmp	.+20     	; 0x582 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 56e:	80 91 10 01 	lds	r24, 0x0110

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 572:	88 23       	and	r24, r24
 574:	61 f0       	breq	.+24     	; 0x58e <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 576:	85 30       	cpi	r24, 0x05	; 5
 578:	61 f0       	breq	.+24     	; 0x592 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 57a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 57e:	83 fd       	sbrc	r24, 3
 580:	0a c0       	rjmp	.+20     	; 0x596 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 582:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 586:	82 ff       	sbrs	r24, 2
 588:	f2 cf       	rjmp	.-28     	; 0x56e <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 592:	83 e0       	ldi	r24, 0x03	; 3
 594:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 596:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 598:	08 95       	ret

0000059a <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 59a:	98 2f       	mov	r25, r24
 59c:	97 30       	cpi	r25, 0x07	; 7
 59e:	58 f5       	brcc	.+86     	; 0x5f6 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 5a0:	90 93 e9 00 	sts	0x00E9, r25
 5a4:	98 17       	cp	r25, r24
 5a6:	39 f0       	breq	.+14     	; 0x5b6 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 5a8:	70 91 ec 00 	lds	r23, 0x00EC
 5ac:	20 91 ed 00 	lds	r18, 0x00ED
 5b0:	50 91 f0 00 	lds	r21, 0x00F0
 5b4:	03 c0       	rjmp	.+6      	; 0x5bc <Endpoint_ConfigureEndpoint_Prv+0x22>
 5b6:	24 2f       	mov	r18, r20
 5b8:	76 2f       	mov	r23, r22
 5ba:	50 e0       	ldi	r21, 0x00	; 0
 5bc:	21 ff       	sbrs	r18, 1
 5be:	19 c0       	rjmp	.+50     	; 0x5f2 <Endpoint_ConfigureEndpoint_Prv+0x58>
 5c0:	30 91 eb 00 	lds	r19, 0x00EB
 5c4:	3e 7f       	andi	r19, 0xFE	; 254
 5c6:	30 93 eb 00 	sts	0x00EB, r19
 5ca:	30 91 ed 00 	lds	r19, 0x00ED
 5ce:	3d 7f       	andi	r19, 0xFD	; 253
 5d0:	30 93 ed 00 	sts	0x00ED, r19
 5d4:	30 91 eb 00 	lds	r19, 0x00EB
 5d8:	31 60       	ori	r19, 0x01	; 1
 5da:	30 93 eb 00 	sts	0x00EB, r19
 5de:	70 93 ec 00 	sts	0x00EC, r23
 5e2:	20 93 ed 00 	sts	0x00ED, r18
 5e6:	50 93 f0 00 	sts	0x00F0, r21
 5ea:	20 91 ee 00 	lds	r18, 0x00EE
 5ee:	27 ff       	sbrs	r18, 7
 5f0:	07 c0       	rjmp	.+14     	; 0x600 <Endpoint_ConfigureEndpoint_Prv+0x66>
 5f2:	9f 5f       	subi	r25, 0xFF	; 255
 5f4:	d3 cf       	rjmp	.-90     	; 0x59c <Endpoint_ConfigureEndpoint_Prv+0x2>
 5f6:	8f 70       	andi	r24, 0x0F	; 15
 5f8:	80 93 e9 00 	sts	0x00E9, r24
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	08 95       	ret
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	08 95       	ret

00000604 <Endpoint_ConfigureEndpointTable>:
 604:	ef 92       	push	r14
 606:	ff 92       	push	r15
 608:	0f 93       	push	r16
 60a:	1f 93       	push	r17
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	e6 2e       	mov	r14, r22
 612:	ec 01       	movw	r28, r24
 614:	8c 01       	movw	r16, r24
 616:	0c 5f       	subi	r16, 0xFC	; 252
 618:	1f 4f       	sbci	r17, 0xFF	; 255
 61a:	f1 2c       	mov	r15, r1
 61c:	fe 14       	cp	r15, r14
 61e:	91 f1       	breq	.+100    	; 0x684 <Endpoint_ConfigureEndpointTable+0x80>
 620:	58 81       	ld	r21, Y
 622:	55 23       	and	r21, r21
 624:	51 f1       	breq	.+84     	; 0x67a <Endpoint_ConfigureEndpointTable+0x76>
 626:	f8 01       	movw	r30, r16
 628:	20 81       	ld	r18, Z
 62a:	69 81       	ldd	r22, Y+1	; 0x01
 62c:	7a 81       	ldd	r23, Y+2	; 0x02
 62e:	31 97       	sbiw	r30, 0x01	; 1
 630:	90 81       	ld	r25, Z
 632:	85 2f       	mov	r24, r21
 634:	8f 70       	andi	r24, 0x0F	; 15
 636:	87 30       	cpi	r24, 0x07	; 7
 638:	10 f0       	brcs	.+4      	; 0x63e <Endpoint_ConfigureEndpointTable+0x3a>
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	24 c0       	rjmp	.+72     	; 0x686 <Endpoint_ConfigureEndpointTable+0x82>
 63e:	22 30       	cpi	r18, 0x02	; 2
 640:	10 f4       	brcc	.+4      	; 0x646 <Endpoint_ConfigureEndpointTable+0x42>
 642:	42 e0       	ldi	r20, 0x02	; 2
 644:	01 c0       	rjmp	.+2      	; 0x648 <Endpoint_ConfigureEndpointTable+0x44>
 646:	46 e0       	ldi	r20, 0x06	; 6
 648:	e8 e0       	ldi	r30, 0x08	; 8
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	20 e0       	ldi	r18, 0x00	; 0
 64e:	e6 17       	cp	r30, r22
 650:	f7 07       	cpc	r31, r23
 652:	20 f4       	brcc	.+8      	; 0x65c <Endpoint_ConfigureEndpointTable+0x58>
 654:	2f 5f       	subi	r18, 0xFF	; 255
 656:	ee 0f       	add	r30, r30
 658:	ff 1f       	adc	r31, r31
 65a:	f9 cf       	rjmp	.-14     	; 0x64e <Endpoint_ConfigureEndpointTable+0x4a>
 65c:	22 95       	swap	r18
 65e:	20 7f       	andi	r18, 0xF0	; 240
 660:	42 2b       	or	r20, r18
 662:	f0 e4       	ldi	r31, 0x40	; 64
 664:	9f 9f       	mul	r25, r31
 666:	90 01       	movw	r18, r0
 668:	11 24       	eor	r1, r1
 66a:	55 1f       	adc	r21, r21
 66c:	55 27       	eor	r21, r21
 66e:	55 1f       	adc	r21, r21
 670:	65 2f       	mov	r22, r21
 672:	62 2b       	or	r22, r18
 674:	92 df       	rcall	.-220    	; 0x59a <Endpoint_ConfigureEndpoint_Prv>
 676:	88 23       	and	r24, r24
 678:	01 f3       	breq	.-64     	; 0x63a <Endpoint_ConfigureEndpointTable+0x36>
 67a:	f3 94       	inc	r15
 67c:	25 96       	adiw	r28, 0x05	; 5
 67e:	0b 5f       	subi	r16, 0xFB	; 251
 680:	1f 4f       	sbci	r17, 0xFF	; 255
 682:	cc cf       	rjmp	.-104    	; 0x61c <Endpoint_ConfigureEndpointTable+0x18>
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	1f 91       	pop	r17
 68c:	0f 91       	pop	r16
 68e:	ff 90       	pop	r15
 690:	ef 90       	pop	r14
 692:	08 95       	ret

00000694 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 694:	80 91 11 01 	lds	r24, 0x0111
 698:	87 ff       	sbrs	r24, 7
 69a:	11 c0       	rjmp	.+34     	; 0x6be <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 69c:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
 6a0:	82 fd       	sbrc	r24, 2
 6a2:	05 c0       	rjmp	.+10     	; 0x6ae <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 6a4:	80 91 10 01 	lds	r24, 0x0110
 6a8:	81 11       	cpse	r24, r1
 6aa:	f8 cf       	rjmp	.-16     	; 0x69c <Endpoint_ClearStatusStage+0x8>
 6ac:	11 c0       	rjmp	.+34     	; 0x6d0 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 6ae:	80 91 e8 00 	lds	r24, 0x00E8
 6b2:	8b 77       	andi	r24, 0x7B	; 123
 6b4:	0b c0       	rjmp	.+22     	; 0x6cc <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 6b6:	80 91 10 01 	lds	r24, 0x0110
 6ba:	88 23       	and	r24, r24
 6bc:	49 f0       	breq	.+18     	; 0x6d0 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 6be:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 6c2:	80 ff       	sbrs	r24, 0
 6c4:	f8 cf       	rjmp	.-16     	; 0x6b6 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6c6:	80 91 e8 00 	lds	r24, 0x00E8
 6ca:	8e 77       	andi	r24, 0x7E	; 126
 6cc:	80 93 e8 00 	sts	0x00E8, r24
 6d0:	08 95       	ret

000006d2 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 6d2:	20 91 e4 00 	lds	r18, 0x00E4
 6d6:	30 91 e5 00 	lds	r19, 0x00E5
 6da:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 6dc:	40 91 ec 00 	lds	r20, 0x00EC
 6e0:	84 2f       	mov	r24, r20
 6e2:	81 70       	andi	r24, 0x01	; 1
 6e4:	40 ff       	sbrs	r20, 0
 6e6:	22 c0       	rjmp	.+68     	; 0x72c <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 6e8:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 6ec:	80 fd       	sbrc	r24, 0
 6ee:	1c c0       	rjmp	.+56     	; 0x728 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 6f0:	80 91 10 01 	lds	r24, 0x0110

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 6f4:	88 23       	and	r24, r24
 6f6:	91 f0       	breq	.+36     	; 0x71c <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 6f8:	85 30       	cpi	r24, 0x05	; 5
 6fa:	91 f0       	breq	.+36     	; 0x720 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 6fc:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 700:	85 fd       	sbrc	r24, 5
 702:	10 c0       	rjmp	.+32     	; 0x724 <Endpoint_WaitUntilReady+0x52>
 704:	40 91 e4 00 	lds	r20, 0x00E4
 708:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 70c:	42 17       	cp	r20, r18
 70e:	53 07       	cpc	r21, r19
 710:	29 f3       	breq	.-54     	; 0x6dc <Endpoint_WaitUntilReady+0xa>
 712:	9a 01       	movw	r18, r20
 714:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 716:	11 f7       	brne	.-60     	; 0x6dc <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 718:	84 e0       	ldi	r24, 0x04	; 4
 71a:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 71c:	82 e0       	ldi	r24, 0x02	; 2
 71e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 720:	83 e0       	ldi	r24, 0x03	; 3
 722:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 72c:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 730:	42 ff       	sbrs	r20, 2
 732:	de cf       	rjmp	.-68     	; 0x6f0 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 734:	08 95       	ret

00000736 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 736:	0f 93       	push	r16
 738:	1f 93       	push	r17
 73a:	cf 93       	push	r28
 73c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 73e:	4b d0       	rcall	.+150    	; 0x7d6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 740:	52 d0       	rcall	.+164    	; 0x7e6 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 742:	c8 ed       	ldi	r28, 0xD8	; 216
 744:	d0 e0       	ldi	r29, 0x00	; 0
 746:	88 81       	ld	r24, Y
 748:	8f 77       	andi	r24, 0x7F	; 127
 74a:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
 74c:	88 81       	ld	r24, Y
 74e:	80 68       	ori	r24, 0x80	; 128
 750:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 752:	88 81       	ld	r24, Y
 754:	8f 7d       	andi	r24, 0xDF	; 223
 756:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 758:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 75a:	10 92 10 01 	sts	0x0110, r1
	USB_Device_ConfigurationNumber  = 0;
 75e:	10 92 0c 01 	sts	0x010C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 762:	10 92 0e 01 	sts	0x010E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 766:	10 92 0d 01 	sts	0x010D, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 76a:	00 ee       	ldi	r16, 0xE0	; 224
 76c:	10 e0       	ldi	r17, 0x00	; 0
 76e:	f8 01       	movw	r30, r16
 770:	80 81       	ld	r24, Z
 772:	8b 7f       	andi	r24, 0xFB	; 251
 774:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 776:	88 81       	ld	r24, Y
 778:	81 60       	ori	r24, 0x01	; 1
 77a:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 77c:	42 e0       	ldi	r20, 0x02	; 2
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	0b df       	rcall	.-490    	; 0x59a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 784:	e1 ee       	ldi	r30, 0xE1	; 225
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	80 81       	ld	r24, Z
 78a:	8e 7f       	andi	r24, 0xFE	; 254
 78c:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 78e:	e2 ee       	ldi	r30, 0xE2	; 226
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	80 81       	ld	r24, Z
 794:	81 60       	ori	r24, 0x01	; 1
 796:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 798:	80 81       	ld	r24, Z
 79a:	88 60       	ori	r24, 0x08	; 8
 79c:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 79e:	f8 01       	movw	r30, r16
 7a0:	80 81       	ld	r24, Z
 7a2:	8e 7f       	andi	r24, 0xFE	; 254
 7a4:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 7a6:	88 81       	ld	r24, Y
 7a8:	80 61       	ori	r24, 0x10	; 16
 7aa:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	1f 91       	pop	r17
 7b2:	0f 91       	pop	r16
 7b4:	08 95       	ret

000007b6 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 7b6:	e8 ed       	ldi	r30, 0xD8	; 216
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	80 81       	ld	r24, Z
 7bc:	8f 7e       	andi	r24, 0xEF	; 239
 7be:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 7c0:	e7 ed       	ldi	r30, 0xD7	; 215
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	80 81       	ld	r24, Z
 7c6:	81 60       	ori	r24, 0x01	; 1
 7c8:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
 7ca:	84 e0       	ldi	r24, 0x04	; 4
 7cc:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	80 93 0f 01 	sts	0x010F, r24

	USB_ResetInterface();
 7d4:	b0 cf       	rjmp	.-160    	; 0x736 <USB_ResetInterface>

000007d6 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
 7d6:	e8 ed       	ldi	r30, 0xD8	; 216
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	80 81       	ld	r24, Z
 7dc:	8e 7f       	andi	r24, 0xFE	; 254
 7de:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 7e0:	10 92 e2 00 	sts	0x00E2, r1
 7e4:	08 95       	ret

000007e6 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 7e6:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 7ea:	10 92 e1 00 	sts	0x00E1, r1
 7ee:	08 95       	ret

000007f0 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 7f0:	1f 92       	push	r1
 7f2:	0f 92       	push	r0
 7f4:	0f b6       	in	r0, 0x3f	; 63
 7f6:	0f 92       	push	r0
 7f8:	11 24       	eor	r1, r1
 7fa:	2f 93       	push	r18
 7fc:	3f 93       	push	r19
 7fe:	4f 93       	push	r20
 800:	5f 93       	push	r21
 802:	6f 93       	push	r22
 804:	7f 93       	push	r23
 806:	8f 93       	push	r24
 808:	9f 93       	push	r25
 80a:	af 93       	push	r26
 80c:	bf 93       	push	r27
 80e:	ef 93       	push	r30
 810:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 812:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 816:	82 ff       	sbrs	r24, 2
 818:	0a c0       	rjmp	.+20     	; 0x82e <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 81a:	80 91 e2 00 	lds	r24, 0x00E2
 81e:	82 ff       	sbrs	r24, 2
 820:	06 c0       	rjmp	.+12     	; 0x82e <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 822:	80 91 e1 00 	lds	r24, 0x00E1
 826:	8b 7f       	andi	r24, 0xFB	; 251
 828:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 82c:	f9 d1       	rcall	.+1010   	; 0xc20 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 82e:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 832:	80 ff       	sbrs	r24, 0
 834:	1d c0       	rjmp	.+58     	; 0x870 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 836:	80 91 d8 00 	lds	r24, 0x00D8
 83a:	80 ff       	sbrs	r24, 0
 83c:	19 c0       	rjmp	.+50     	; 0x870 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 83e:	80 91 da 00 	lds	r24, 0x00DA
 842:	8e 7f       	andi	r24, 0xFE	; 254
 844:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 848:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 84c:	80 ff       	sbrs	r24, 0
 84e:	0c c0       	rjmp	.+24     	; 0x868 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 850:	80 e1       	ldi	r24, 0x10	; 16
 852:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 854:	82 e1       	ldi	r24, 0x12	; 18
 856:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 858:	09 b4       	in	r0, 0x29	; 41
 85a:	00 fe       	sbrs	r0, 0
 85c:	fd cf       	rjmp	.-6      	; 0x858 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	80 93 10 01 	sts	0x0110, r24
			EVENT_USB_Device_Connect();
 864:	54 dd       	rcall	.-1368   	; 0x30e <EVENT_USB_Device_Connect>
 866:	04 c0       	rjmp	.+8      	; 0x870 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 868:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 86a:	10 92 10 01 	sts	0x0110, r1
			EVENT_USB_Device_Disconnect();
 86e:	50 dd       	rcall	.-1376   	; 0x310 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 870:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 874:	80 ff       	sbrs	r24, 0
 876:	18 c0       	rjmp	.+48     	; 0x8a8 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 878:	80 91 e2 00 	lds	r24, 0x00E2
 87c:	80 ff       	sbrs	r24, 0
 87e:	14 c0       	rjmp	.+40     	; 0x8a8 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 880:	80 91 e2 00 	lds	r24, 0x00E2
 884:	8e 7f       	andi	r24, 0xFE	; 254
 886:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 88a:	80 91 e2 00 	lds	r24, 0x00E2
 88e:	80 61       	ori	r24, 0x10	; 16
 890:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 894:	80 91 d8 00 	lds	r24, 0x00D8
 898:	80 62       	ori	r24, 0x20	; 32
 89a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 89e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 8a0:	85 e0       	ldi	r24, 0x05	; 5
 8a2:	80 93 10 01 	sts	0x0110, r24
		EVENT_USB_Device_Suspend();
 8a6:	bc d1       	rcall	.+888    	; 0xc20 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 8a8:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 8ac:	84 ff       	sbrs	r24, 4
 8ae:	2f c0       	rjmp	.+94     	; 0x90e <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 8b0:	80 91 e2 00 	lds	r24, 0x00E2
 8b4:	84 ff       	sbrs	r24, 4
 8b6:	2b c0       	rjmp	.+86     	; 0x90e <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 8b8:	80 e1       	ldi	r24, 0x10	; 16
 8ba:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 8bc:	82 e1       	ldi	r24, 0x12	; 18
 8be:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 8c0:	09 b4       	in	r0, 0x29	; 41
 8c2:	00 fe       	sbrs	r0, 0
 8c4:	fd cf       	rjmp	.-6      	; 0x8c0 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 8c6:	80 91 d8 00 	lds	r24, 0x00D8
 8ca:	8f 7d       	andi	r24, 0xDF	; 223
 8cc:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 8d0:	80 91 e1 00 	lds	r24, 0x00E1
 8d4:	8f 7e       	andi	r24, 0xEF	; 239
 8d6:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 8da:	80 91 e2 00 	lds	r24, 0x00E2
 8de:	8f 7e       	andi	r24, 0xEF	; 239
 8e0:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 8e4:	80 91 e2 00 	lds	r24, 0x00E2
 8e8:	81 60       	ori	r24, 0x01	; 1
 8ea:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 8ee:	80 91 0c 01 	lds	r24, 0x010C
 8f2:	88 23       	and	r24, r24
 8f4:	11 f0       	breq	.+4      	; 0x8fa <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
 8f6:	84 e0       	ldi	r24, 0x04	; 4
 8f8:	07 c0       	rjmp	.+14     	; 0x908 <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 8fa:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 8fe:	87 fd       	sbrc	r24, 7
 900:	02 c0       	rjmp	.+4      	; 0x906 <__vector_10+0x116>
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	01 c0       	rjmp	.+2      	; 0x908 <__vector_10+0x118>
 906:	83 e0       	ldi	r24, 0x03	; 3
 908:	80 93 10 01 	sts	0x0110, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 90c:	89 d1       	rcall	.+786    	; 0xc20 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 90e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 912:	83 ff       	sbrs	r24, 3
 914:	22 c0       	rjmp	.+68     	; 0x95a <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 916:	80 91 e2 00 	lds	r24, 0x00E2
 91a:	83 ff       	sbrs	r24, 3
 91c:	1e c0       	rjmp	.+60     	; 0x95a <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 91e:	80 91 e1 00 	lds	r24, 0x00E1
 922:	87 7f       	andi	r24, 0xF7	; 247
 924:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 928:	82 e0       	ldi	r24, 0x02	; 2
 92a:	80 93 10 01 	sts	0x0110, r24
		USB_Device_ConfigurationNumber = 0;
 92e:	10 92 0c 01 	sts	0x010C, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 932:	80 91 e1 00 	lds	r24, 0x00E1
 936:	8e 7f       	andi	r24, 0xFE	; 254
 938:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 93c:	80 91 e2 00 	lds	r24, 0x00E2
 940:	8e 7f       	andi	r24, 0xFE	; 254
 942:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 946:	80 91 e2 00 	lds	r24, 0x00E2
 94a:	80 61       	ori	r24, 0x10	; 16
 94c:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 950:	42 e0       	ldi	r20, 0x02	; 2
 952:	60 e0       	ldi	r22, 0x00	; 0
 954:	80 e0       	ldi	r24, 0x00	; 0
 956:	21 de       	rcall	.-958    	; 0x59a <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 958:	63 d1       	rcall	.+710    	; 0xc20 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 95a:	ff 91       	pop	r31
 95c:	ef 91       	pop	r30
 95e:	bf 91       	pop	r27
 960:	af 91       	pop	r26
 962:	9f 91       	pop	r25
 964:	8f 91       	pop	r24
 966:	7f 91       	pop	r23
 968:	6f 91       	pop	r22
 96a:	5f 91       	pop	r21
 96c:	4f 91       	pop	r20
 96e:	3f 91       	pop	r19
 970:	2f 91       	pop	r18
 972:	0f 90       	pop	r0
 974:	0f be       	out	0x3f, r0	; 63
 976:	0f 90       	pop	r0
 978:	1f 90       	pop	r1
 97a:	18 95       	reti

0000097c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 97c:	1f 93       	push	r17
 97e:	cf 93       	push	r28
 980:	df 93       	push	r29
 982:	cd b7       	in	r28, 0x3d	; 61
 984:	de b7       	in	r29, 0x3e	; 62
 986:	aa 97       	sbiw	r28, 0x2a	; 42
 988:	0f b6       	in	r0, 0x3f	; 63
 98a:	f8 94       	cli
 98c:	de bf       	out	0x3e, r29	; 62
 98e:	0f be       	out	0x3f, r0	; 63
 990:	cd bf       	out	0x3d, r28	; 61
 992:	e1 e1       	ldi	r30, 0x11	; 17
 994:	f1 e0       	ldi	r31, 0x01	; 1
 996:	88 e0       	ldi	r24, 0x08	; 8
 998:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 99a:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 99e:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9a0:	8e 13       	cpse	r24, r30
 9a2:	fb cf       	rjmp	.-10     	; 0x99a <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 9a4:	b9 dc       	rcall	.-1678   	; 0x318 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9a6:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 9aa:	83 ff       	sbrs	r24, 3
 9ac:	21 c1       	rjmp	.+578    	; 0xbf0 <__stack+0xf1>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9ae:	80 91 11 01 	lds	r24, 0x0111

		switch (USB_ControlRequest.bRequest)
 9b2:	90 91 12 01 	lds	r25, 0x0112
 9b6:	95 30       	cpi	r25, 0x05	; 5
 9b8:	09 f4       	brne	.+2      	; 0x9bc <USB_Device_ProcessControlRequest+0x40>
 9ba:	78 c0       	rjmp	.+240    	; 0xaac <USB_Device_ProcessControlRequest+0x130>
 9bc:	30 f4       	brcc	.+12     	; 0x9ca <USB_Device_ProcessControlRequest+0x4e>
 9be:	91 30       	cpi	r25, 0x01	; 1
 9c0:	81 f1       	breq	.+96     	; 0xa22 <USB_Device_ProcessControlRequest+0xa6>
 9c2:	68 f0       	brcs	.+26     	; 0x9de <USB_Device_ProcessControlRequest+0x62>
 9c4:	93 30       	cpi	r25, 0x03	; 3
 9c6:	69 f1       	breq	.+90     	; 0xa22 <USB_Device_ProcessControlRequest+0xa6>
 9c8:	13 c1       	rjmp	.+550    	; 0xbf0 <__stack+0xf1>
 9ca:	98 30       	cpi	r25, 0x08	; 8
 9cc:	09 f4       	brne	.+2      	; 0x9d0 <USB_Device_ProcessControlRequest+0x54>
 9ce:	e2 c0       	rjmp	.+452    	; 0xb94 <__stack+0x95>
 9d0:	99 30       	cpi	r25, 0x09	; 9
 9d2:	09 f4       	brne	.+2      	; 0x9d6 <USB_Device_ProcessControlRequest+0x5a>
 9d4:	f1 c0       	rjmp	.+482    	; 0xbb8 <__stack+0xb9>
 9d6:	96 30       	cpi	r25, 0x06	; 6
 9d8:	09 f0       	breq	.+2      	; 0x9dc <USB_Device_ProcessControlRequest+0x60>
 9da:	0a c1       	rjmp	.+532    	; 0xbf0 <__stack+0xf1>
 9dc:	89 c0       	rjmp	.+274    	; 0xaf0 <USB_Device_ProcessControlRequest+0x174>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9de:	80 38       	cpi	r24, 0x80	; 128
 9e0:	81 f0       	breq	.+32     	; 0xa02 <USB_Device_ProcessControlRequest+0x86>
 9e2:	82 38       	cpi	r24, 0x82	; 130
 9e4:	09 f0       	breq	.+2      	; 0x9e8 <USB_Device_ProcessControlRequest+0x6c>
 9e6:	04 c1       	rjmp	.+520    	; 0xbf0 <__stack+0xf1>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9e8:	80 91 15 01 	lds	r24, 0x0115
 9ec:	8f 70       	andi	r24, 0x0F	; 15
 9ee:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 9f2:	80 91 eb 00 	lds	r24, 0x00EB
 9f6:	85 fb       	bst	r24, 5
 9f8:	88 27       	eor	r24, r24
 9fa:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9fc:	10 92 e9 00 	sts	0x00E9, r1
 a00:	06 c0       	rjmp	.+12     	; 0xa0e <USB_Device_ProcessControlRequest+0x92>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 a02:	80 91 0d 01 	lds	r24, 0x010D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a06:	90 91 0e 01 	lds	r25, 0x010E
 a0a:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a0c:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a0e:	90 91 e8 00 	lds	r25, 0x00E8
 a12:	97 7f       	andi	r25, 0xF7	; 247
 a14:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a18:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 a1c:	10 92 f1 00 	sts	0x00F1, r1
 a20:	c4 c0       	rjmp	.+392    	; 0xbaa <__stack+0xab>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a22:	28 2f       	mov	r18, r24
 a24:	2d 7f       	andi	r18, 0xFD	; 253
 a26:	09 f0       	breq	.+2      	; 0xa2a <USB_Device_ProcessControlRequest+0xae>
 a28:	e3 c0       	rjmp	.+454    	; 0xbf0 <__stack+0xf1>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a2a:	88 23       	and	r24, r24
 a2c:	19 f0       	breq	.+6      	; 0xa34 <USB_Device_ProcessControlRequest+0xb8>
 a2e:	82 30       	cpi	r24, 0x02	; 2
 a30:	61 f0       	breq	.+24     	; 0xa4a <USB_Device_ProcessControlRequest+0xce>
 a32:	de c0       	rjmp	.+444    	; 0xbf0 <__stack+0xf1>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a34:	80 91 13 01 	lds	r24, 0x0113
 a38:	81 30       	cpi	r24, 0x01	; 1
 a3a:	09 f0       	breq	.+2      	; 0xa3e <USB_Device_ProcessControlRequest+0xc2>
 a3c:	d9 c0       	rjmp	.+434    	; 0xbf0 <__stack+0xf1>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a3e:	93 30       	cpi	r25, 0x03	; 3
 a40:	09 f0       	breq	.+2      	; 0xa44 <USB_Device_ProcessControlRequest+0xc8>
 a42:	80 e0       	ldi	r24, 0x00	; 0
 a44:	80 93 0e 01 	sts	0x010E, r24
 a48:	2b c0       	rjmp	.+86     	; 0xaa0 <USB_Device_ProcessControlRequest+0x124>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a4a:	80 91 13 01 	lds	r24, 0x0113
 a4e:	81 11       	cpse	r24, r1
 a50:	27 c0       	rjmp	.+78     	; 0xaa0 <USB_Device_ProcessControlRequest+0x124>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a52:	80 91 15 01 	lds	r24, 0x0115
 a56:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a58:	09 f4       	brne	.+2      	; 0xa5c <USB_Device_ProcessControlRequest+0xe0>
 a5a:	ca c0       	rjmp	.+404    	; 0xbf0 <__stack+0xf1>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a5c:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a60:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a64:	20 ff       	sbrs	r18, 0
 a66:	1c c0       	rjmp	.+56     	; 0xaa0 <USB_Device_ProcessControlRequest+0x124>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a68:	93 30       	cpi	r25, 0x03	; 3
 a6a:	21 f4       	brne	.+8      	; 0xa74 <USB_Device_ProcessControlRequest+0xf8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a6c:	80 91 eb 00 	lds	r24, 0x00EB
 a70:	80 62       	ori	r24, 0x20	; 32
 a72:	14 c0       	rjmp	.+40     	; 0xa9c <USB_Device_ProcessControlRequest+0x120>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a74:	90 91 eb 00 	lds	r25, 0x00EB
 a78:	90 61       	ori	r25, 0x10	; 16
 a7a:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 a7e:	21 e0       	ldi	r18, 0x01	; 1
 a80:	30 e0       	ldi	r19, 0x00	; 0
 a82:	a9 01       	movw	r20, r18
 a84:	02 c0       	rjmp	.+4      	; 0xa8a <USB_Device_ProcessControlRequest+0x10e>
 a86:	44 0f       	add	r20, r20
 a88:	55 1f       	adc	r21, r21
 a8a:	8a 95       	dec	r24
 a8c:	e2 f7       	brpl	.-8      	; 0xa86 <USB_Device_ProcessControlRequest+0x10a>
 a8e:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
 a92:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a96:	80 91 eb 00 	lds	r24, 0x00EB
 a9a:	88 60       	ori	r24, 0x08	; 8
 a9c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 aa0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 aa4:	80 91 e8 00 	lds	r24, 0x00E8
 aa8:	87 7f       	andi	r24, 0xF7	; 247
 aaa:	82 c0       	rjmp	.+260    	; 0xbb0 <__stack+0xb1>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 aac:	81 11       	cpse	r24, r1
 aae:	a0 c0       	rjmp	.+320    	; 0xbf0 <__stack+0xf1>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 ab0:	10 91 13 01 	lds	r17, 0x0113
 ab4:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 ab6:	80 91 e3 00 	lds	r24, 0x00E3
 aba:	80 78       	andi	r24, 0x80	; 128
 abc:	81 2b       	or	r24, r17
 abe:	80 93 e3 00 	sts	0x00E3, r24
 ac2:	80 91 e8 00 	lds	r24, 0x00E8
 ac6:	87 7f       	andi	r24, 0xF7	; 247
 ac8:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 acc:	e3 dd       	rcall	.-1082   	; 0x694 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 ace:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 ad2:	80 ff       	sbrs	r24, 0
 ad4:	fc cf       	rjmp	.-8      	; 0xace <USB_Device_ProcessControlRequest+0x152>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 ad6:	80 91 e3 00 	lds	r24, 0x00E3
 ada:	80 68       	ori	r24, 0x80	; 128
 adc:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 ae0:	11 11       	cpse	r17, r1
 ae2:	02 c0       	rjmp	.+4      	; 0xae8 <USB_Device_ProcessControlRequest+0x16c>
 ae4:	82 e0       	ldi	r24, 0x02	; 2
 ae6:	01 c0       	rjmp	.+2      	; 0xaea <USB_Device_ProcessControlRequest+0x16e>
 ae8:	83 e0       	ldi	r24, 0x03	; 3
 aea:	80 93 10 01 	sts	0x0110, r24
 aee:	80 c0       	rjmp	.+256    	; 0xbf0 <__stack+0xf1>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 af0:	80 58       	subi	r24, 0x80	; 128
 af2:	82 30       	cpi	r24, 0x02	; 2
 af4:	08 f0       	brcs	.+2      	; 0xaf8 <USB_Device_ProcessControlRequest+0x17c>
 af6:	7c c0       	rjmp	.+248    	; 0xbf0 <__stack+0xf1>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 af8:	80 91 13 01 	lds	r24, 0x0113
 afc:	90 91 14 01 	lds	r25, 0x0114
 b00:	8c 3d       	cpi	r24, 0xDC	; 220
 b02:	53 e0       	ldi	r21, 0x03	; 3
 b04:	95 07       	cpc	r25, r21
 b06:	71 f5       	brne	.+92     	; 0xb64 <__stack+0x65>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b08:	83 e0       	ldi	r24, 0x03	; 3
 b0a:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b0c:	8a e2       	ldi	r24, 0x2A	; 42
 b0e:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b10:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b12:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b14:	de 01       	movw	r26, r28
 b16:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b18:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 b1a:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b1c:	51 e2       	ldi	r21, 0x21	; 33
 b1e:	e3 2f       	mov	r30, r19
 b20:	f0 e0       	ldi	r31, 0x00	; 0
 b22:	50 93 57 00 	sts	0x0057, r21
 b26:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 b28:	20 ff       	sbrs	r18, 0
 b2a:	03 c0       	rjmp	.+6      	; 0xb32 <__stack+0x33>
					{
						SerialByte >>= 4;
 b2c:	e2 95       	swap	r30
 b2e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 b30:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 b32:	ef 70       	andi	r30, 0x0F	; 15
 b34:	8e 2f       	mov	r24, r30
 b36:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b38:	ea 30       	cpi	r30, 0x0A	; 10
 b3a:	10 f0       	brcs	.+4      	; 0xb40 <__stack+0x41>
 b3c:	c7 96       	adiw	r24, 0x37	; 55
 b3e:	01 c0       	rjmp	.+2      	; 0xb42 <__stack+0x43>
 b40:	c0 96       	adiw	r24, 0x30	; 48
 b42:	8d 93       	st	X+, r24
 b44:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b46:	2f 5f       	subi	r18, 0xFF	; 255
 b48:	24 31       	cpi	r18, 0x14	; 20
 b4a:	49 f7       	brne	.-46     	; 0xb1e <__stack+0x1f>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b4c:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b4e:	80 91 e8 00 	lds	r24, 0x00E8
 b52:	87 7f       	andi	r24, 0xF7	; 247
 b54:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b58:	6a e2       	ldi	r22, 0x2A	; 42
 b5a:	70 e0       	ldi	r23, 0x00	; 0
 b5c:	ce 01       	movw	r24, r28
 b5e:	01 96       	adiw	r24, 0x01	; 1
 b60:	58 dc       	rcall	.-1872   	; 0x412 <Endpoint_Write_Control_Stream_LE>
 b62:	12 c0       	rjmp	.+36     	; 0xb88 <__stack+0x89>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b64:	ae 01       	movw	r20, r28
 b66:	4f 5f       	subi	r20, 0xFF	; 255
 b68:	5f 4f       	sbci	r21, 0xFF	; 255
 b6a:	60 91 15 01 	lds	r22, 0x0115
 b6e:	d5 db       	rcall	.-2134   	; 0x31a <CALLBACK_USB_GetDescriptor>
 b70:	bc 01       	movw	r22, r24
 b72:	89 2b       	or	r24, r25
 b74:	09 f4       	brne	.+2      	; 0xb78 <__stack+0x79>
 b76:	3c c0       	rjmp	.+120    	; 0xbf0 <__stack+0xf1>
 b78:	90 91 e8 00 	lds	r25, 0x00E8
 b7c:	97 7f       	andi	r25, 0xF7	; 247
 b7e:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 b82:	89 81       	ldd	r24, Y+1	; 0x01
 b84:	9a 81       	ldd	r25, Y+2	; 0x02
 b86:	a8 dc       	rcall	.-1712   	; 0x4d8 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b88:	80 91 e8 00 	lds	r24, 0x00E8
 b8c:	8b 77       	andi	r24, 0x7B	; 123
 b8e:	80 93 e8 00 	sts	0x00E8, r24
 b92:	2e c0       	rjmp	.+92     	; 0xbf0 <__stack+0xf1>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b94:	80 38       	cpi	r24, 0x80	; 128
 b96:	61 f5       	brne	.+88     	; 0xbf0 <__stack+0xf1>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b98:	80 91 e8 00 	lds	r24, 0x00E8
 b9c:	87 7f       	andi	r24, 0xF7	; 247
 b9e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 ba2:	80 91 0c 01 	lds	r24, 0x010C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 ba6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 baa:	80 91 e8 00 	lds	r24, 0x00E8
 bae:	8e 77       	andi	r24, 0x7E	; 126
 bb0:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 bb4:	6f dd       	rcall	.-1314   	; 0x694 <Endpoint_ClearStatusStage>
 bb6:	1c c0       	rjmp	.+56     	; 0xbf0 <__stack+0xf1>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 bb8:	81 11       	cpse	r24, r1
 bba:	1a c0       	rjmp	.+52     	; 0xbf0 <__stack+0xf1>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 bbc:	90 91 13 01 	lds	r25, 0x0113
 bc0:	92 30       	cpi	r25, 0x02	; 2
 bc2:	b0 f4       	brcc	.+44     	; 0xbf0 <__stack+0xf1>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bc4:	80 91 e8 00 	lds	r24, 0x00E8
 bc8:	87 7f       	andi	r24, 0xF7	; 247
 bca:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 bce:	90 93 0c 01 	sts	0x010C, r25

	Endpoint_ClearStatusStage();
 bd2:	60 dd       	rcall	.-1344   	; 0x694 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 bd4:	80 91 0c 01 	lds	r24, 0x010C
 bd8:	81 11       	cpse	r24, r1
 bda:	06 c0       	rjmp	.+12     	; 0xbe8 <__stack+0xe9>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 bdc:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 be0:	87 fd       	sbrc	r24, 7
 be2:	02 c0       	rjmp	.+4      	; 0xbe8 <__stack+0xe9>
 be4:	81 e0       	ldi	r24, 0x01	; 1
 be6:	01 c0       	rjmp	.+2      	; 0xbea <__stack+0xeb>
 be8:	84 e0       	ldi	r24, 0x04	; 4
 bea:	80 93 10 01 	sts	0x0110, r24

	EVENT_USB_Device_ConfigurationChanged();
 bee:	91 db       	rcall	.-2270   	; 0x312 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bf0:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 bf4:	83 ff       	sbrs	r24, 3
 bf6:	0a c0       	rjmp	.+20     	; 0xc0c <__stack+0x10d>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bf8:	80 91 e8 00 	lds	r24, 0x00E8
 bfc:	87 7f       	andi	r24, 0xF7	; 247
 bfe:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c02:	80 91 eb 00 	lds	r24, 0x00EB
 c06:	80 62       	ori	r24, 0x20	; 32
 c08:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 c0c:	aa 96       	adiw	r28, 0x2a	; 42
 c0e:	0f b6       	in	r0, 0x3f	; 63
 c10:	f8 94       	cli
 c12:	de bf       	out	0x3e, r29	; 62
 c14:	0f be       	out	0x3f, r0	; 63
 c16:	cd bf       	out	0x3d, r28	; 61
 c18:	df 91       	pop	r29
 c1a:	cf 91       	pop	r28
 c1c:	1f 91       	pop	r17
 c1e:	08 95       	ret

00000c20 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 c20:	08 95       	ret

00000c22 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c22:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 c24:	80 91 10 01 	lds	r24, 0x0110
 c28:	88 23       	and	r24, r24
 c2a:	99 f0       	breq	.+38     	; 0xc52 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c2c:	c0 91 e9 00 	lds	r28, 0x00E9
 c30:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 c32:	90 91 ec 00 	lds	r25, 0x00EC
 c36:	89 2f       	mov	r24, r25
 c38:	81 70       	andi	r24, 0x01	; 1
 c3a:	90 fd       	sbrc	r25, 0
 c3c:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c3e:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c40:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c44:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 c48:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 c4a:	98 de       	rcall	.-720    	; 0x97c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c4c:	cf 70       	andi	r28, 0x0F	; 15
 c4e:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 c52:	cf 91       	pop	r28
 c54:	08 95       	ret

00000c56 <MIDI_Device_ConfigureEndpoints>:
#define  __INCLUDE_FROM_MIDI_DRIVER
#define  __INCLUDE_FROM_MIDI_DEVICE_C
#include "MIDIClassDevice.h"

bool MIDI_Device_ConfigureEndpoints(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 c56:	cf 93       	push	r28
 c58:	df 93       	push	r29
 c5a:	ec 01       	movw	r28, r24
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
 c5c:	1b 86       	std	Y+11, r1	; 0x0b

	MIDIInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
 c5e:	82 e0       	ldi	r24, 0x02	; 2
 c60:	8c 83       	std	Y+4, r24	; 0x04
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
 c62:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
 c64:	61 e0       	ldi	r22, 0x01	; 1
 c66:	ce 01       	movw	r24, r28
 c68:	01 96       	adiw	r24, 0x01	; 1
 c6a:	cc dc       	rcall	.-1640   	; 0x604 <Endpoint_ConfigureEndpointTable>
 c6c:	88 23       	and	r24, r24
 c6e:	31 f0       	breq	.+12     	; 0xc7c <MIDI_Device_ConfigureEndpoints+0x26>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
 c70:	61 e0       	ldi	r22, 0x01	; 1
 c72:	ce 01       	movw	r24, r28
 c74:	06 96       	adiw	r24, 0x06	; 6
	  return false;

	return true;
}
 c76:	df 91       	pop	r29
 c78:	cf 91       	pop	r28
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
 c7a:	c4 cc       	rjmp	.-1656   	; 0x604 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
 c7c:	80 e0       	ldi	r24, 0x00	; 0
 c7e:	df 91       	pop	r29
 c80:	cf 91       	pop	r28
 c82:	08 95       	ret

00000c84 <MIDI_Device_SendEventPacket>:
}

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 c84:	20 91 10 01 	lds	r18, 0x0110
 c88:	24 30       	cpi	r18, 0x04	; 4
 c8a:	d1 f4       	brne	.+52     	; 0xcc0 <MIDI_Device_SendEventPacket+0x3c>
 c8c:	9b 01       	movw	r18, r22
 c8e:	fc 01       	movw	r30, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c90:	81 81       	ldd	r24, Z+1	; 0x01
 c92:	8f 70       	andi	r24, 0x0F	; 15
 c94:	80 93 e9 00 	sts	0x00E9, r24

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if ((ErrorCode = Endpoint_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != ENDPOINT_RWSTREAM_NoError)
 c98:	40 e0       	ldi	r20, 0x00	; 0
 c9a:	50 e0       	ldi	r21, 0x00	; 0
 c9c:	64 e0       	ldi	r22, 0x04	; 4
 c9e:	70 e0       	ldi	r23, 0x00	; 0
 ca0:	c9 01       	movw	r24, r18
 ca2:	6d db       	rcall	.-2342   	; 0x37e <Endpoint_Write_Stream_LE>
 ca4:	81 11       	cpse	r24, r1
 ca6:	0f c0       	rjmp	.+30     	; 0xcc6 <MIDI_Device_SendEventPacket+0x42>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 ca8:	90 91 e8 00 	lds	r25, 0x00E8
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
 cac:	89 2f       	mov	r24, r25
 cae:	80 72       	andi	r24, 0x20	; 32
 cb0:	95 fd       	sbrc	r25, 5
 cb2:	08 c0       	rjmp	.+16     	; 0xcc4 <MIDI_Device_SendEventPacket+0x40>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cb4:	90 91 e8 00 	lds	r25, 0x00E8
 cb8:	9e 77       	andi	r25, 0x7E	; 126
 cba:	90 93 e8 00 	sts	0x00E8, r25
 cbe:	08 95       	ret

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 cc0:	82 e0       	ldi	r24, 0x02	; 2
 cc2:	08 95       	ret
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearIN();

	return ENDPOINT_RWSTREAM_NoError;
 cc4:	80 e0       	ldi	r24, 0x00	; 0
}
 cc6:	08 95       	ret

00000cc8 <MIDI_Device_Flush>:

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 cc8:	20 91 10 01 	lds	r18, 0x0110
 ccc:	24 30       	cpi	r18, 0x04	; 4
 cce:	99 f4       	brne	.+38     	; 0xcf6 <MIDI_Device_Flush+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cd0:	fc 01       	movw	r30, r24
 cd2:	81 81       	ldd	r24, Z+1	; 0x01
 cd4:	8f 70       	andi	r24, 0x0F	; 15
 cd6:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 cda:	20 91 f3 00 	lds	r18, 0x00F3
 cde:	80 91 f2 00 	lds	r24, 0x00F2
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	92 2b       	or	r25, r18

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_BytesInEndpoint())
 ce6:	89 2b       	or	r24, r25
 ce8:	41 f0       	breq	.+16     	; 0xcfa <MIDI_Device_Flush+0x32>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cea:	80 91 e8 00 	lds	r24, 0x00E8
 cee:	8e 77       	andi	r24, 0x7E	; 126
 cf0:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 cf4:	ee cc       	rjmp	.-1572   	; 0x6d2 <Endpoint_WaitUntilReady>
}

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 cf6:	82 e0       	ldi	r24, 0x02	; 2
 cf8:	08 95       	ret

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	return ENDPOINT_READYWAIT_NoError;
 cfa:	80 e0       	ldi	r24, 0x00	; 0
}
 cfc:	08 95       	ret

00000cfe <MIDI_Device_USBTask>:

	return true;
}

void MIDI_Device_USBTask(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 cfe:	fc 01       	movw	r30, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d00:	80 91 10 01 	lds	r24, 0x0110
 d04:	84 30       	cpi	r24, 0x04	; 4
 d06:	51 f4       	brne	.+20     	; 0xd1c <MIDI_Device_USBTask+0x1e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d08:	91 81       	ldd	r25, Z+1	; 0x01
 d0a:	9f 70       	andi	r25, 0x0F	; 15
 d0c:	90 93 e9 00 	sts	0x00E9, r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d10:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
 d14:	80 ff       	sbrs	r24, 0
 d16:	02 c0       	rjmp	.+4      	; 0xd1c <MIDI_Device_USBTask+0x1e>
	  MIDI_Device_Flush(MIDIInterfaceInfo);
 d18:	cf 01       	movw	r24, r30
 d1a:	d6 cf       	rjmp	.-84     	; 0xcc8 <MIDI_Device_Flush>
 d1c:	08 95       	ret

00000d1e <_exit>:
 d1e:	f8 94       	cli

00000d20 <__stop_program>:
 d20:	ff cf       	rjmp	.-2      	; 0xd20 <__stop_program>
