
MIDI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000e58  00000eec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010c  0080010c  00000ef8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000058d9  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ced  00000000  00000000  00006ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003071  00000000  00000000  000087c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000728  00000000  00000000  0000b838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000260f  00000000  00000000  0000bf60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002dd8  00000000  00000000  0000e56f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  00011347  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b0 c0       	rjmp	.+352    	; 0x162 <__ctors_end>
   2:	00 00       	nop
   4:	c9 c0       	rjmp	.+402    	; 0x198 <__bad_interrupt>
   6:	00 00       	nop
   8:	c7 c0       	rjmp	.+398    	; 0x198 <__bad_interrupt>
   a:	00 00       	nop
   c:	c5 c0       	rjmp	.+394    	; 0x198 <__bad_interrupt>
   e:	00 00       	nop
  10:	c3 c0       	rjmp	.+390    	; 0x198 <__bad_interrupt>
  12:	00 00       	nop
  14:	c1 c0       	rjmp	.+386    	; 0x198 <__bad_interrupt>
  16:	00 00       	nop
  18:	bf c0       	rjmp	.+382    	; 0x198 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	bd c0       	rjmp	.+378    	; 0x198 <__bad_interrupt>
  1e:	00 00       	nop
  20:	bb c0       	rjmp	.+374    	; 0x198 <__bad_interrupt>
  22:	00 00       	nop
  24:	b9 c0       	rjmp	.+370    	; 0x198 <__bad_interrupt>
  26:	00 00       	nop
  28:	5a c4       	rjmp	.+2228   	; 0x8de <__vector_10>
  2a:	00 00       	nop
  2c:	b5 c0       	rjmp	.+362    	; 0x198 <__bad_interrupt>
  2e:	00 00       	nop
  30:	b3 c0       	rjmp	.+358    	; 0x198 <__bad_interrupt>
  32:	00 00       	nop
  34:	b1 c0       	rjmp	.+354    	; 0x198 <__bad_interrupt>
  36:	00 00       	nop
  38:	af c0       	rjmp	.+350    	; 0x198 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ad c0       	rjmp	.+346    	; 0x198 <__bad_interrupt>
  3e:	00 00       	nop
  40:	ab c0       	rjmp	.+342    	; 0x198 <__bad_interrupt>
  42:	00 00       	nop
  44:	a9 c0       	rjmp	.+338    	; 0x198 <__bad_interrupt>
  46:	00 00       	nop
  48:	a7 c0       	rjmp	.+334    	; 0x198 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a5 c0       	rjmp	.+330    	; 0x198 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a3 c0       	rjmp	.+326    	; 0x198 <__bad_interrupt>
  52:	00 00       	nop
  54:	a1 c0       	rjmp	.+322    	; 0x198 <__bad_interrupt>
  56:	00 00       	nop
  58:	9f c0       	rjmp	.+318    	; 0x198 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9d c0       	rjmp	.+314    	; 0x198 <__bad_interrupt>
  5e:	00 00       	nop
  60:	9b c0       	rjmp	.+310    	; 0x198 <__bad_interrupt>
  62:	00 00       	nop
  64:	99 c0       	rjmp	.+306    	; 0x198 <__bad_interrupt>
  66:	00 00       	nop
  68:	97 c0       	rjmp	.+302    	; 0x198 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	95 c0       	rjmp	.+298    	; 0x198 <__bad_interrupt>
  6e:	00 00       	nop
  70:	93 c0       	rjmp	.+294    	; 0x198 <__bad_interrupt>
  72:	00 00       	nop
  74:	91 c0       	rjmp	.+290    	; 0x198 <__bad_interrupt>
  76:	00 00       	nop
  78:	8f c0       	rjmp	.+286    	; 0x198 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8d c0       	rjmp	.+282    	; 0x198 <__bad_interrupt>
  7e:	00 00       	nop
  80:	8b c0       	rjmp	.+278    	; 0x198 <__bad_interrupt>
  82:	00 00       	nop
  84:	89 c0       	rjmp	.+274    	; 0x198 <__bad_interrupt>
  86:	00 00       	nop
  88:	87 c0       	rjmp	.+270    	; 0x198 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	85 c0       	rjmp	.+266    	; 0x198 <__bad_interrupt>
  8e:	00 00       	nop
  90:	83 c0       	rjmp	.+262    	; 0x198 <__bad_interrupt>
  92:	00 00       	nop
  94:	81 c0       	rjmp	.+258    	; 0x198 <__bad_interrupt>
  96:	00 00       	nop
  98:	7f c0       	rjmp	.+254    	; 0x198 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	7d c0       	rjmp	.+250    	; 0x198 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	7b c0       	rjmp	.+246    	; 0x198 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	79 c0       	rjmp	.+242    	; 0x198 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	77 c0       	rjmp	.+238    	; 0x198 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <ProductString>:
  ac:	1e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 49 00     ..L.U.F.A. .M.I.
  bc:	44 00 49 00 20 00 44 00 65 00 6d 00 6f 00 00 00     D.I. .D.e.m.o...

000000cc <ManufacturerString>:
  cc:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  dc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e6 <LanguageString>:
  e6:	04 03 09 04                                         ....

000000ea <ConfigurationDescriptor>:
  ea:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
  fa:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
 10a:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
 11a:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
 12a:	09 24 03 02 04 01 01 01 00 09 05 01 02 40 00 05     .$...........@..
 13a:	00 00 05 25 01 01 01 09 05 82 02 40 00 05 00 00     ...%.......@....
 14a:	05 25 01 01 03                                      .%...

0000014f <DeviceDescriptor>:
 14f:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
 15f:	00 01 00                                            ...

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	da e0       	ldi	r29, 0x0A	; 10
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	e8 e5       	ldi	r30, 0x58	; 88
 176:	fe e0       	ldi	r31, 0x0E	; 14
 178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
 17a:	05 90       	lpm	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	ac 30       	cpi	r26, 0x0C	; 12
 180:	b1 07       	cpc	r27, r17
 182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	ac e0       	ldi	r26, 0x0C	; 12
 188:	b1 e0       	ldi	r27, 0x01	; 1
 18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
 18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
 18e:	a9 31       	cpi	r26, 0x19	; 25
 190:	b2 07       	cpc	r27, r18
 192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
 194:	80 d0       	rcall	.+256    	; 0x296 <main>
 196:	5e c6       	rjmp	.+3260   	; 0xe54 <_exit>

00000198 <__bad_interrupt>:
 198:	33 cf       	rjmp	.-410    	; 0x0 <__vectors>

0000019a <cc_send>:
// 	MIDI_Device_Flush(&Keyboard_MIDI_Interface);
// }

// отправить в кабель 0 инструмент instr CONTROL CHANGE с заданным vel
void cc_send(int instr, int vel)
{
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	00 d0       	rcall	.+0      	; 0x1a0 <cc_send+0x6>
 1a0:	00 d0       	rcall	.+0      	; 0x1a2 <cc_send+0x8>
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
	MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t) // сформировать пакет
 1a6:	9b e0       	ldi	r25, 0x0B	; 11
 1a8:	99 83       	std	Y+1, r25	; 0x01
 1aa:	90 eb       	ldi	r25, 0xB0	; 176
 1ac:	9a 83       	std	Y+2, r25	; 0x02
 1ae:	8b 83       	std	Y+3, r24	; 0x03
 1b0:	6c 83       	std	Y+4, r22	; 0x04
				.Data1       = MIDI_COMMAND_CONTROL_CHANGE | MIDI_CHANNEL(1), // канал 1
				.Data2       = instr, 
				.Data3       = vel, 
			};

			MIDI_Device_SendEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent); // отправить пакет
 1b2:	be 01       	movw	r22, r28
 1b4:	6f 5f       	subi	r22, 0xFF	; 255
 1b6:	7f 4f       	sbci	r23, 0xFF	; 255
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	da d5       	rcall	.+2996   	; 0xd72 <MIDI_Device_SendEventPacket>
			MIDI_Device_Flush(&Keyboard_MIDI_Interface);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	f9 d5       	rcall	.+3058   	; 0xdb6 <MIDI_Device_Flush>
}
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <MUX_address>:

/** установить адрес входа мультиплексора */
void MUX_address(int address)
{
	if (address & 0b0001) PORTF |= (1<<PF4); else PORTF &= ~(1<<PF4);
 1d2:	80 ff       	sbrs	r24, 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <MUX_address+0x8>
 1d6:	8c 9a       	sbi	0x11, 4	; 17
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <MUX_address+0xa>
 1da:	8c 98       	cbi	0x11, 4	; 17
	if (address & 0b0010) PORTF |= (1<<PF5); else PORTF &= ~(1<<PF5);
 1dc:	81 ff       	sbrs	r24, 1
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <MUX_address+0x12>
 1e0:	8d 9a       	sbi	0x11, 5	; 17
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <MUX_address+0x14>
 1e4:	8d 98       	cbi	0x11, 5	; 17
	if (address & 0b0100) PORTF |= (1<<PF6); else PORTF &= ~(1<<PF6);
 1e6:	82 ff       	sbrs	r24, 2
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <MUX_address+0x1c>
 1ea:	8e 9a       	sbi	0x11, 6	; 17
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <MUX_address+0x1e>
 1ee:	8e 98       	cbi	0x11, 6	; 17
	if (address & 0b1000) PORTB |= (1<<PB6); else PORTB &= ~(1<<PB6);
 1f0:	83 ff       	sbrs	r24, 3
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <MUX_address+0x26>
 1f4:	2e 9a       	sbi	0x05, 6	; 5
 1f6:	08 95       	ret
 1f8:	2e 98       	cbi	0x05, 6	; 5
 1fa:	08 95       	ret

000001fc <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1fc:	84 b7       	in	r24, 0x34	; 52
 1fe:	87 7f       	andi	r24, 0xF7	; 247
 200:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	a8 95       	wdr
 208:	80 91 60 00 	lds	r24, 0x0060
 20c:	88 61       	ori	r24, 0x18	; 24
 20e:	80 93 60 00 	sts	0x0060, r24
 212:	10 92 60 00 	sts	0x0060, r1
 216:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	80 e8       	ldi	r24, 0x80	; 128
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	80 93 61 00 	sts	0x0061, r24
 224:	90 93 61 00 	sts	0x0061, r25
 228:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_PORTB_LEDS;
 22a:	20 9a       	sbi	0x04, 0	; 4
				PORTB &= ~LEDS_PORTB_LEDS;
 22c:	28 98       	cbi	0x05, 0	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
 22e:	55 9a       	sbi	0x0a, 5	; 10
				PORTD &= ~LEDS_PORTD_LEDS;
 230:	5d 98       	cbi	0x0b, 5	; 11
				DDRC  |=  LEDS_PORTC_LEDS;
 232:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_PORTC_LEDS;
 234:	47 98       	cbi	0x08, 7	; 8
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
 236:	36 d3       	rcall	.+1644   	; 0x8a4 <USB_Init>

	// ----------------D2 (PD1) вход кнопки, D3 (PD0) выход на светодиод
	// PB6, PF6, PF5, PF4 - выходы адреса мультиплексора, PF4-S0 ... PB6-S3
	// PB5 - выход разрешения мультиплексора (активный низкий)
	DDRB |= (1<<PB5) | (1<<PB6);
 238:	84 b1       	in	r24, 0x04	; 4
 23a:	80 66       	ori	r24, 0x60	; 96
 23c:	84 b9       	out	0x04, r24	; 4
	DDRF |= (1<<PF6) | (1<<PF5) | (1<<PF4);
 23e:	80 b3       	in	r24, 0x10	; 16
 240:	80 67       	ori	r24, 0x70	; 112
 242:	80 bb       	out	0x10, r24	; 16
	// разрешить работу мультиплексора
	// MUX_enable()
	
	// ---------------- настройка АЦП------------------------------------------

	ADMUX &= ~((1 << REFS1)); // REFS0 = 1, REFS1 = 0 - используется AVCC, оно VCC (на Pro Micro)
 244:	ec e7       	ldi	r30, 0x7C	; 124
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	8f 77       	andi	r24, 0x7F	; 127
 24c:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);
 24e:	80 81       	ld	r24, Z
 250:	80 64       	ori	r24, 0x40	; 64
 252:	80 83       	st	Z, r24

	ADMUX &= ~((1 << MUX5) | (1 << MUX4) | (1 << MUX3)); // 000111 - выбор ADC7 без извращений (A0 на Pro Micro)
 254:	80 81       	ld	r24, Z
 256:	87 7c       	andi	r24, 0xC7	; 199
 258:	80 83       	st	Z, r24
	ADMUX |= ((1<< MUX2) | (1<< MUX1) | (1<< MUX0));
 25a:	80 81       	ld	r24, Z
 25c:	87 60       	ori	r24, 0x07	; 7
 25e:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 111 делитель 128, частота АЦП 16000/128 = 125 КГц
 260:	ea e7       	ldi	r30, 0x7A	; 122
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	87 60       	ori	r24, 0x07	; 7
 268:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); // включение АЦП
 26a:	80 81       	ld	r24, Z
 26c:	80 68       	ori	r24, 0x80	; 128
 26e:	80 83       	st	Z, r24
 270:	08 95       	ret

00000272 <raw_ADC>:
}

// считать АЦП
int raw_ADC(void)
{
	ADCSRA |= (1 << ADSC); // начать преобразование
 272:	80 91 7a 00 	lds	r24, 0x007A
 276:	80 64       	ori	r24, 0x40	; 64
 278:	80 93 7a 00 	sts	0x007A, r24
	while (ADCSRA & (1 << ADSC)); // ждать сброса бита - окончания преобразования
 27c:	80 91 7a 00 	lds	r24, 0x007A
 280:	86 fd       	sbrc	r24, 6
 282:	fc cf       	rjmp	.-8      	; 0x27c <raw_ADC+0xa>
	return ADC;
 284:	80 91 78 00 	lds	r24, 0x0078
 288:	90 91 79 00 	lds	r25, 0x0079
}
 28c:	08 95       	ret

0000028e <MUX_enable>:

// разрешить мультиплексор
void MUX_enable(void)
{
	PORTB &= ~(1<<PB5);
 28e:	2d 98       	cbi	0x05, 5	; 5
 290:	08 95       	ret

00000292 <MUX_disable>:
}

// запретить мультиплексор
void MUX_disable(void)
{
	PORTB |= (1<<PB5);
 292:	2d 9a       	sbi	0x05, 5	; 5
 294:	08 95       	ret

00000296 <main>:

*/


int main(void)
{
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	a4 97       	sbiw	r28, 0x24	; 36
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
 2aa:	a8 df       	rcall	.-176    	; 0x1fc <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 2ac:	78 94       	sei
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
 2ae:	5e 01       	movw	r10, r28
 2b0:	21 e2       	ldi	r18, 0x21	; 33
 2b2:	a2 0e       	add	r10, r18
 2b4:	b1 1c       	adc	r11, r1
 2b6:	8e 01       	movw	r16, r28
 2b8:	0f 5f       	subi	r16, 0xFF	; 255
 2ba:	1f 4f       	sbci	r17, 0xFF	; 255

	int ADC_current[16]; // текущие значения АЦП
	int ADC_previous[16]; // предыдущие значения АЦП
	uint8_t ADC_deviation = 20; // порог фиксации изменения АЦП, давить шум

	for (uint8_t i=0; i<16; i++) { ADC_current[i] = raw_ADC(); ADC_previous[i] = ADC_current[i];} // инициализация
 2bc:	da df       	rcall	.-76     	; 0x272 <raw_ADC>
 2be:	f8 01       	movw	r30, r16
 2c0:	81 93       	st	Z+, r24
 2c2:	91 93       	st	Z+, r25
 2c4:	8f 01       	movw	r16, r30
 2c6:	ea 15       	cp	r30, r10
 2c8:	fb 05       	cpc	r31, r11
 2ca:	c1 f7       	brne	.-16     	; 0x2bc <main+0x26>
	for (;;)
	{
		
		// дроп входящих
		MIDI_EventPacket_t ReceivedMIDIEvent; 
		while (MIDI_Device_ReceiveEventPacket(&Keyboard_MIDI_Interface, &ReceivedMIDIEvent));
 2cc:	b5 01       	movw	r22, r10
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	9c d5       	rcall	.+2872   	; 0xe0c <MIDI_Device_ReceiveEventPacket>
 2d4:	81 11       	cpse	r24, r1
 2d6:	fa cf       	rjmp	.-12     	; 0x2cc <main+0x36>
 2d8:	9e 01       	movw	r18, r28
 2da:	2f 5f       	subi	r18, 0xFF	; 255
 2dc:	3f 4f       	sbci	r19, 0xFF	; 255
 2de:	69 01       	movw	r12, r18
 2e0:	00 e0       	ldi	r16, 0x00	; 0
 2e2:	10 e0       	ldi	r17, 0x00	; 0
		
		// опрос 16 входов мультиплексора
		for (int MUX_pos = 0; MUX_pos < 3; MUX_pos++ ){

				MUX_address(MUX_pos); // установить адрес
 2e4:	c8 01       	movw	r24, r16
 2e6:	75 df       	rcall	.-278    	; 0x1d2 <MUX_address>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e8:	8f e9       	ldi	r24, 0x9F	; 159
 2ea:	9f e0       	ldi	r25, 0x0F	; 15
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <main+0x56>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0x5c>
 2f2:	00 00       	nop

				_delay_ms(1);
				
				MUX_enable();
 2f4:	cc df       	rcall	.-104    	; 0x28e <MUX_enable>
 2f6:	ef e9       	ldi	r30, 0x9F	; 159
 2f8:	ff e0       	ldi	r31, 0x0F	; 15
 2fa:	31 97       	sbiw	r30, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <main+0x64>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <main+0x6a>
 300:	00 00       	nop

				_delay_ms(1);

				ADC_current[MUX_pos] = raw_ADC(); // АЦП
 302:	b7 df       	rcall	.-146    	; 0x272 <raw_ADC>
 304:	7c 01       	movw	r14, r24

				MUX_disable();
 306:	c5 df       	rcall	.-118    	; 0x292 <MUX_disable>
				
				if ( abs(ADC_current[MUX_pos] - ADC_previous[MUX_pos]) >= ADC_deviation ) // если изменения больше порога, отправить сообщение CC
 308:	f6 01       	movw	r30, r12
 30a:	80 81       	ld	r24, Z
 30c:	91 81       	ldd	r25, Z+1	; 0x01
 30e:	97 01       	movw	r18, r14
 310:	28 1b       	sub	r18, r24
 312:	39 0b       	sbc	r19, r25
 314:	c9 01       	movw	r24, r18
 316:	37 ff       	sbrs	r19, 7
 318:	03 c0       	rjmp	.+6      	; 0x320 <main+0x8a>
 31a:	91 95       	neg	r25
 31c:	81 95       	neg	r24
 31e:	91 09       	sbc	r25, r1
 320:	44 97       	sbiw	r24, 0x14	; 20
 322:	74 f0       	brlt	.+28     	; 0x340 <main+0xaa>
				{
					cc_send(MUX_pos, ADC_current[MUX_pos] / 8);
 324:	c7 01       	movw	r24, r14
 326:	f7 fc       	sbrc	r15, 7
 328:	07 96       	adiw	r24, 0x07	; 7
 32a:	bc 01       	movw	r22, r24
 32c:	83 e0       	ldi	r24, 0x03	; 3
 32e:	75 95       	asr	r23
 330:	67 95       	ror	r22
 332:	8a 95       	dec	r24
 334:	e1 f7       	brne	.-8      	; 0x32e <main+0x98>
 336:	c8 01       	movw	r24, r16
 338:	30 df       	rcall	.-416    	; 0x19a <cc_send>
					ADC_previous[MUX_pos] = ADC_current[MUX_pos];
 33a:	f6 01       	movw	r30, r12
 33c:	f1 82       	std	Z+1, r15	; 0x01
 33e:	e0 82       	st	Z, r14
 340:	8f e3       	ldi	r24, 0x3F	; 63
 342:	9c e9       	ldi	r25, 0x9C	; 156
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <main+0xae>
 348:	00 c0       	rjmp	.+0      	; 0x34a <main+0xb4>
 34a:	00 00       	nop
				}

				_delay_ms(10);

				MIDI_Device_USBTask(&Keyboard_MIDI_Interface);
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	4d d5       	rcall	.+2714   	; 0xdec <MIDI_Device_USBTask>
				USB_USBTask();
 352:	de d4       	rcall	.+2492   	; 0xd10 <USB_USBTask>
		// дроп входящих
		MIDI_EventPacket_t ReceivedMIDIEvent; 
		while (MIDI_Device_ReceiveEventPacket(&Keyboard_MIDI_Interface, &ReceivedMIDIEvent));
		
		// опрос 16 входов мультиплексора
		for (int MUX_pos = 0; MUX_pos < 3; MUX_pos++ ){
 354:	0f 5f       	subi	r16, 0xFF	; 255
 356:	1f 4f       	sbci	r17, 0xFF	; 255
 358:	92 e0       	ldi	r25, 0x02	; 2
 35a:	c9 0e       	add	r12, r25
 35c:	d1 1c       	adc	r13, r1
 35e:	03 30       	cpi	r16, 0x03	; 3
 360:	11 05       	cpc	r17, r1
 362:	09 f0       	breq	.+2      	; 0x366 <main+0xd0>
 364:	bf cf       	rjmp	.-130    	; 0x2e4 <main+0x4e>
 366:	b2 cf       	rjmp	.-156    	; 0x2cc <main+0x36>

00000368 <EVENT_USB_Device_Connect>:
// }


/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
 368:	08 95       	ret

0000036a <EVENT_USB_Device_Disconnect>:
	// LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
 36a:	08 95       	ret

0000036c <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MIDI_Device_ConfigureEndpoints(&Keyboard_MIDI_Interface);
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	e9 c4       	rjmp	.+2514   	; 0xd44 <MIDI_Device_ConfigureEndpoints>

00000372 <EVENT_USB_Device_ControlRequest>:
	// LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
 372:	08 95       	ret

00000374 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 374:	29 2f       	mov	r18, r25
 376:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 378:	22 30       	cpi	r18, 0x02	; 2
 37a:	31 05       	cpc	r19, r1
 37c:	59 f0       	breq	.+22     	; 0x394 <CALLBACK_USB_GetDescriptor+0x20>
 37e:	23 30       	cpi	r18, 0x03	; 3
 380:	31 05       	cpc	r19, r1
 382:	69 f0       	breq	.+26     	; 0x39e <CALLBACK_USB_GetDescriptor+0x2a>
 384:	21 30       	cpi	r18, 0x01	; 1
 386:	31 05       	cpc	r19, r1
 388:	f9 f4       	brne	.+62     	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 38a:	82 e1       	ldi	r24, 0x12	; 18
 38c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 38e:	2f e4       	ldi	r18, 0x4F	; 79
 390:	31 e0       	ldi	r19, 0x01	; 1
 392:	1e c0       	rjmp	.+60     	; 0x3d0 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 394:	85 e6       	ldi	r24, 0x65	; 101
 396:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 398:	2a ee       	ldi	r18, 0xEA	; 234
 39a:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 39c:	19 c0       	rjmp	.+50     	; 0x3d0 <CALLBACK_USB_GetDescriptor+0x5c>
 39e:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	91 05       	cpc	r25, r1
 3a4:	41 f0       	breq	.+16     	; 0x3b6 <CALLBACK_USB_GetDescriptor+0x42>
 3a6:	82 30       	cpi	r24, 0x02	; 2
 3a8:	91 05       	cpc	r25, r1
 3aa:	41 f0       	breq	.+16     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x48>
 3ac:	89 2b       	or	r24, r25
 3ae:	61 f4       	brne	.+24     	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 3b0:	e6 ee       	ldi	r30, 0xE6	; 230
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	05 c0       	rjmp	.+10     	; 0x3c0 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 3b6:	ec ec       	ldi	r30, 0xCC	; 204
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 3bc:	ec ea       	ldi	r30, 0xAC	; 172
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	84 91       	lpm	r24, Z
 3c2:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 3c4:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 3d0:	fa 01       	movw	r30, r20
 3d2:	31 83       	std	Z+1, r19	; 0x01
 3d4:	20 83       	st	Z, r18
	return Size;
}
 3d6:	08 95       	ret

000003d8 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 3d8:	cf 92       	push	r12
 3da:	df 92       	push	r13
 3dc:	ef 92       	push	r14
 3de:	ff 92       	push	r15
 3e0:	0f 93       	push	r16
 3e2:	1f 93       	push	r17
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	ec 01       	movw	r28, r24
 3ea:	8b 01       	movw	r16, r22
 3ec:	7a 01       	movw	r14, r20
 3ee:	e8 d1       	rcall	.+976    	; 0x7c0 <Endpoint_WaitUntilReady>
 3f0:	81 11       	cpse	r24, r1
 3f2:	33 c0       	rjmp	.+102    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 3f4:	e1 14       	cp	r14, r1
 3f6:	f1 04       	cpc	r15, r1
 3f8:	39 f0       	breq	.+14     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fa:	f7 01       	movw	r30, r14
 3fc:	80 81       	ld	r24, Z
 3fe:	91 81       	ldd	r25, Z+1	; 0x01
 400:	08 1b       	sub	r16, r24
 402:	19 0b       	sbc	r17, r25
 404:	c8 0f       	add	r28, r24
 406:	d9 1f       	adc	r29, r25
 408:	c1 2c       	mov	r12, r1
 40a:	d1 2c       	mov	r13, r1
 40c:	01 15       	cp	r16, r1
 40e:	11 05       	cpc	r17, r1
 410:	19 f1       	breq	.+70     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 412:	80 91 e8 00 	lds	r24, 0x00E8
 416:	85 fd       	sbrc	r24, 5
 418:	16 c0       	rjmp	.+44     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 41a:	80 91 e8 00 	lds	r24, 0x00E8
 41e:	8e 77       	andi	r24, 0x7E	; 126
 420:	80 93 e8 00 	sts	0x00E8, r24
 424:	75 d4       	rcall	.+2282   	; 0xd10 <USB_USBTask>
 426:	e1 14       	cp	r14, r1
 428:	f1 04       	cpc	r15, r1
 42a:	49 f0       	breq	.+18     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 42c:	f7 01       	movw	r30, r14
 42e:	80 81       	ld	r24, Z
 430:	91 81       	ldd	r25, Z+1	; 0x01
 432:	c8 0e       	add	r12, r24
 434:	d9 1e       	adc	r13, r25
 436:	d1 82       	std	Z+1, r13	; 0x01
 438:	c0 82       	st	Z, r12
 43a:	85 e0       	ldi	r24, 0x05	; 5
 43c:	0e c0       	rjmp	.+28     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 43e:	c0 d1       	rcall	.+896    	; 0x7c0 <Endpoint_WaitUntilReady>
 440:	88 23       	and	r24, r24
 442:	21 f3       	breq	.-56     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 444:	0a c0       	rjmp	.+20     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 446:	89 91       	ld	r24, Y+
 448:	80 93 f1 00 	sts	0x00F1, r24
 44c:	01 50       	subi	r16, 0x01	; 1
 44e:	11 09       	sbc	r17, r1
 450:	ff ef       	ldi	r31, 0xFF	; 255
 452:	cf 1a       	sub	r12, r31
 454:	df 0a       	sbc	r13, r31
 456:	da cf       	rjmp	.-76     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	ff 90       	pop	r15
 464:	ef 90       	pop	r14
 466:	df 90       	pop	r13
 468:	cf 90       	pop	r12
 46a:	08 95       	ret

0000046c <Endpoint_Read_Stream_LE>:
 46c:	cf 92       	push	r12
 46e:	df 92       	push	r13
 470:	ef 92       	push	r14
 472:	ff 92       	push	r15
 474:	0f 93       	push	r16
 476:	1f 93       	push	r17
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	ec 01       	movw	r28, r24
 47e:	8b 01       	movw	r16, r22
 480:	7a 01       	movw	r14, r20
 482:	9e d1       	rcall	.+828    	; 0x7c0 <Endpoint_WaitUntilReady>
 484:	81 11       	cpse	r24, r1
 486:	33 c0       	rjmp	.+102    	; 0x4ee <Endpoint_Read_Stream_LE+0x82>
 488:	e1 14       	cp	r14, r1
 48a:	f1 04       	cpc	r15, r1
 48c:	39 f0       	breq	.+14     	; 0x49c <Endpoint_Read_Stream_LE+0x30>
 48e:	f7 01       	movw	r30, r14
 490:	80 81       	ld	r24, Z
 492:	91 81       	ldd	r25, Z+1	; 0x01
 494:	08 1b       	sub	r16, r24
 496:	19 0b       	sbc	r17, r25
 498:	c8 0f       	add	r28, r24
 49a:	d9 1f       	adc	r29, r25
 49c:	c1 2c       	mov	r12, r1
 49e:	d1 2c       	mov	r13, r1
 4a0:	01 15       	cp	r16, r1
 4a2:	11 05       	cpc	r17, r1
 4a4:	19 f1       	breq	.+70     	; 0x4ec <Endpoint_Read_Stream_LE+0x80>
 4a6:	80 91 e8 00 	lds	r24, 0x00E8
 4aa:	85 fd       	sbrc	r24, 5
 4ac:	16 c0       	rjmp	.+44     	; 0x4da <Endpoint_Read_Stream_LE+0x6e>
 4ae:	80 91 e8 00 	lds	r24, 0x00E8
 4b2:	8b 77       	andi	r24, 0x7B	; 123
 4b4:	80 93 e8 00 	sts	0x00E8, r24
 4b8:	2b d4       	rcall	.+2134   	; 0xd10 <USB_USBTask>
 4ba:	e1 14       	cp	r14, r1
 4bc:	f1 04       	cpc	r15, r1
 4be:	49 f0       	breq	.+18     	; 0x4d2 <Endpoint_Read_Stream_LE+0x66>
 4c0:	f7 01       	movw	r30, r14
 4c2:	80 81       	ld	r24, Z
 4c4:	91 81       	ldd	r25, Z+1	; 0x01
 4c6:	c8 0e       	add	r12, r24
 4c8:	d9 1e       	adc	r13, r25
 4ca:	d1 82       	std	Z+1, r13	; 0x01
 4cc:	c0 82       	st	Z, r12
 4ce:	85 e0       	ldi	r24, 0x05	; 5
 4d0:	0e c0       	rjmp	.+28     	; 0x4ee <Endpoint_Read_Stream_LE+0x82>
 4d2:	76 d1       	rcall	.+748    	; 0x7c0 <Endpoint_WaitUntilReady>
 4d4:	88 23       	and	r24, r24
 4d6:	21 f3       	breq	.-56     	; 0x4a0 <Endpoint_Read_Stream_LE+0x34>
 4d8:	0a c0       	rjmp	.+20     	; 0x4ee <Endpoint_Read_Stream_LE+0x82>
 4da:	80 91 f1 00 	lds	r24, 0x00F1
 4de:	89 93       	st	Y+, r24
 4e0:	01 50       	subi	r16, 0x01	; 1
 4e2:	11 09       	sbc	r17, r1
 4e4:	ff ef       	ldi	r31, 0xFF	; 255
 4e6:	cf 1a       	sub	r12, r31
 4e8:	df 0a       	sbc	r13, r31
 4ea:	da cf       	rjmp	.-76     	; 0x4a0 <Endpoint_Read_Stream_LE+0x34>
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	ff 90       	pop	r15
 4f8:	ef 90       	pop	r14
 4fa:	df 90       	pop	r13
 4fc:	cf 90       	pop	r12
 4fe:	08 95       	ret

00000500 <Endpoint_Write_Control_Stream_LE>:
 500:	20 91 17 01 	lds	r18, 0x0117
 504:	30 91 18 01 	lds	r19, 0x0118
 508:	26 17       	cp	r18, r22
 50a:	37 07       	cpc	r19, r23
 50c:	48 f0       	brcs	.+18     	; 0x520 <Endpoint_Write_Control_Stream_LE+0x20>
 50e:	61 15       	cp	r22, r1
 510:	71 05       	cpc	r23, r1
 512:	39 f4       	brne	.+14     	; 0x522 <Endpoint_Write_Control_Stream_LE+0x22>
 514:	20 91 e8 00 	lds	r18, 0x00E8
 518:	2e 77       	andi	r18, 0x7E	; 126
 51a:	20 93 e8 00 	sts	0x00E8, r18
 51e:	01 c0       	rjmp	.+2      	; 0x522 <Endpoint_Write_Control_Stream_LE+0x22>
 520:	b9 01       	movw	r22, r18
 522:	40 e0       	ldi	r20, 0x00	; 0
 524:	61 15       	cp	r22, r1
 526:	71 05       	cpc	r23, r1
 528:	a9 f1       	breq	.+106    	; 0x594 <Endpoint_Write_Control_Stream_LE+0x94>
 52a:	20 91 10 01 	lds	r18, 0x0110
 52e:	22 23       	and	r18, r18
 530:	09 f4       	brne	.+2      	; 0x534 <Endpoint_Write_Control_Stream_LE+0x34>
 532:	43 c0       	rjmp	.+134    	; 0x5ba <Endpoint_Write_Control_Stream_LE+0xba>
 534:	25 30       	cpi	r18, 0x05	; 5
 536:	09 f4       	brne	.+2      	; 0x53a <Endpoint_Write_Control_Stream_LE+0x3a>
 538:	42 c0       	rjmp	.+132    	; 0x5be <Endpoint_Write_Control_Stream_LE+0xbe>
 53a:	20 91 e8 00 	lds	r18, 0x00E8
 53e:	23 fd       	sbrc	r18, 3
 540:	40 c0       	rjmp	.+128    	; 0x5c2 <Endpoint_Write_Control_Stream_LE+0xc2>
 542:	20 91 e8 00 	lds	r18, 0x00E8
 546:	22 fd       	sbrc	r18, 2
 548:	32 c0       	rjmp	.+100    	; 0x5ae <Endpoint_Write_Control_Stream_LE+0xae>
 54a:	20 91 e8 00 	lds	r18, 0x00E8
 54e:	20 ff       	sbrs	r18, 0
 550:	e9 cf       	rjmp	.-46     	; 0x524 <Endpoint_Write_Control_Stream_LE+0x24>
 552:	40 91 f3 00 	lds	r20, 0x00F3
 556:	20 91 f2 00 	lds	r18, 0x00F2
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	34 2b       	or	r19, r20
 55e:	fc 01       	movw	r30, r24
 560:	cf 01       	movw	r24, r30
 562:	61 15       	cp	r22, r1
 564:	71 05       	cpc	r23, r1
 566:	59 f0       	breq	.+22     	; 0x57e <Endpoint_Write_Control_Stream_LE+0x7e>
 568:	28 30       	cpi	r18, 0x08	; 8
 56a:	31 05       	cpc	r19, r1
 56c:	40 f4       	brcc	.+16     	; 0x57e <Endpoint_Write_Control_Stream_LE+0x7e>
 56e:	81 91       	ld	r24, Z+
 570:	80 93 f1 00 	sts	0x00F1, r24
 574:	61 50       	subi	r22, 0x01	; 1
 576:	71 09       	sbc	r23, r1
 578:	2f 5f       	subi	r18, 0xFF	; 255
 57a:	3f 4f       	sbci	r19, 0xFF	; 255
 57c:	f1 cf       	rjmp	.-30     	; 0x560 <Endpoint_Write_Control_Stream_LE+0x60>
 57e:	41 e0       	ldi	r20, 0x01	; 1
 580:	28 30       	cpi	r18, 0x08	; 8
 582:	31 05       	cpc	r19, r1
 584:	09 f0       	breq	.+2      	; 0x588 <Endpoint_Write_Control_Stream_LE+0x88>
 586:	40 e0       	ldi	r20, 0x00	; 0
 588:	20 91 e8 00 	lds	r18, 0x00E8
 58c:	2e 77       	andi	r18, 0x7E	; 126
 58e:	20 93 e8 00 	sts	0x00E8, r18
 592:	c8 cf       	rjmp	.-112    	; 0x524 <Endpoint_Write_Control_Stream_LE+0x24>
 594:	41 11       	cpse	r20, r1
 596:	c9 cf       	rjmp	.-110    	; 0x52a <Endpoint_Write_Control_Stream_LE+0x2a>
 598:	0a c0       	rjmp	.+20     	; 0x5ae <Endpoint_Write_Control_Stream_LE+0xae>
 59a:	80 91 10 01 	lds	r24, 0x0110
 59e:	88 23       	and	r24, r24
 5a0:	61 f0       	breq	.+24     	; 0x5ba <Endpoint_Write_Control_Stream_LE+0xba>
 5a2:	85 30       	cpi	r24, 0x05	; 5
 5a4:	61 f0       	breq	.+24     	; 0x5be <Endpoint_Write_Control_Stream_LE+0xbe>
 5a6:	80 91 e8 00 	lds	r24, 0x00E8
 5aa:	83 fd       	sbrc	r24, 3
 5ac:	0a c0       	rjmp	.+20     	; 0x5c2 <Endpoint_Write_Control_Stream_LE+0xc2>
 5ae:	80 91 e8 00 	lds	r24, 0x00E8
 5b2:	82 ff       	sbrs	r24, 2
 5b4:	f2 cf       	rjmp	.-28     	; 0x59a <Endpoint_Write_Control_Stream_LE+0x9a>
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	08 95       	ret
 5ba:	82 e0       	ldi	r24, 0x02	; 2
 5bc:	08 95       	ret
 5be:	83 e0       	ldi	r24, 0x03	; 3
 5c0:	08 95       	ret
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	08 95       	ret

000005c6 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 5c6:	20 91 17 01 	lds	r18, 0x0117
 5ca:	30 91 18 01 	lds	r19, 0x0118
 5ce:	26 17       	cp	r18, r22
 5d0:	37 07       	cpc	r19, r23
 5d2:	48 f0       	brcs	.+18     	; 0x5e6 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 5d4:	61 15       	cp	r22, r1
 5d6:	71 05       	cpc	r23, r1
 5d8:	39 f4       	brne	.+14     	; 0x5e8 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5da:	20 91 e8 00 	lds	r18, 0x00E8
 5de:	2e 77       	andi	r18, 0x7E	; 126
 5e0:	20 93 e8 00 	sts	0x00E8, r18
 5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <Endpoint_Write_Control_PStream_LE+0x22>
 5e6:	b9 01       	movw	r22, r18
 5e8:	fc 01       	movw	r30, r24
 5ea:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 5ec:	61 15       	cp	r22, r1
 5ee:	71 05       	cpc	r23, r1
 5f0:	91 f1       	breq	.+100    	; 0x656 <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5f2:	80 91 10 01 	lds	r24, 0x0110

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5f6:	88 23       	and	r24, r24
 5f8:	09 f4       	brne	.+2      	; 0x5fc <Endpoint_Write_Control_PStream_LE+0x36>
 5fa:	40 c0       	rjmp	.+128    	; 0x67c <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5fc:	85 30       	cpi	r24, 0x05	; 5
 5fe:	09 f4       	brne	.+2      	; 0x602 <Endpoint_Write_Control_PStream_LE+0x3c>
 600:	3f c0       	rjmp	.+126    	; 0x680 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 602:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 606:	83 fd       	sbrc	r24, 3
 608:	3d c0       	rjmp	.+122    	; 0x684 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 60a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 60e:	82 fd       	sbrc	r24, 2
 610:	2f c0       	rjmp	.+94     	; 0x670 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 612:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 616:	80 ff       	sbrs	r24, 0
 618:	e9 cf       	rjmp	.-46     	; 0x5ec <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 61a:	20 91 f3 00 	lds	r18, 0x00F3
 61e:	80 91 f2 00 	lds	r24, 0x00F2
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 626:	61 15       	cp	r22, r1
 628:	71 05       	cpc	r23, r1
 62a:	59 f0       	breq	.+22     	; 0x642 <Endpoint_Write_Control_PStream_LE+0x7c>
 62c:	88 30       	cpi	r24, 0x08	; 8
 62e:	91 05       	cpc	r25, r1
 630:	40 f4       	brcc	.+16     	; 0x642 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 632:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 634:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 638:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 63a:	61 50       	subi	r22, 0x01	; 1
 63c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 63e:	01 96       	adiw	r24, 0x01	; 1
 640:	f2 cf       	rjmp	.-28     	; 0x626 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 642:	21 e0       	ldi	r18, 0x01	; 1
 644:	08 97       	sbiw	r24, 0x08	; 8
 646:	09 f0       	breq	.+2      	; 0x64a <Endpoint_Write_Control_PStream_LE+0x84>
 648:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 64a:	80 91 e8 00 	lds	r24, 0x00E8
 64e:	8e 77       	andi	r24, 0x7E	; 126
 650:	80 93 e8 00 	sts	0x00E8, r24
 654:	cb cf       	rjmp	.-106    	; 0x5ec <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 656:	21 11       	cpse	r18, r1
 658:	cc cf       	rjmp	.-104    	; 0x5f2 <Endpoint_Write_Control_PStream_LE+0x2c>
 65a:	0a c0       	rjmp	.+20     	; 0x670 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 65c:	80 91 10 01 	lds	r24, 0x0110

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 660:	88 23       	and	r24, r24
 662:	61 f0       	breq	.+24     	; 0x67c <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 664:	85 30       	cpi	r24, 0x05	; 5
 666:	61 f0       	breq	.+24     	; 0x680 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 668:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 66c:	83 fd       	sbrc	r24, 3
 66e:	0a c0       	rjmp	.+20     	; 0x684 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 670:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 674:	82 ff       	sbrs	r24, 2
 676:	f2 cf       	rjmp	.-28     	; 0x65c <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 67c:	82 e0       	ldi	r24, 0x02	; 2
 67e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 680:	83 e0       	ldi	r24, 0x03	; 3
 682:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 684:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 686:	08 95       	ret

00000688 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 688:	98 2f       	mov	r25, r24
 68a:	97 30       	cpi	r25, 0x07	; 7
 68c:	58 f5       	brcc	.+86     	; 0x6e4 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 68e:	90 93 e9 00 	sts	0x00E9, r25
 692:	98 17       	cp	r25, r24
 694:	39 f0       	breq	.+14     	; 0x6a4 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 696:	70 91 ec 00 	lds	r23, 0x00EC
 69a:	20 91 ed 00 	lds	r18, 0x00ED
 69e:	50 91 f0 00 	lds	r21, 0x00F0
 6a2:	03 c0       	rjmp	.+6      	; 0x6aa <Endpoint_ConfigureEndpoint_Prv+0x22>
 6a4:	24 2f       	mov	r18, r20
 6a6:	76 2f       	mov	r23, r22
 6a8:	50 e0       	ldi	r21, 0x00	; 0
 6aa:	21 ff       	sbrs	r18, 1
 6ac:	19 c0       	rjmp	.+50     	; 0x6e0 <Endpoint_ConfigureEndpoint_Prv+0x58>
 6ae:	30 91 eb 00 	lds	r19, 0x00EB
 6b2:	3e 7f       	andi	r19, 0xFE	; 254
 6b4:	30 93 eb 00 	sts	0x00EB, r19
 6b8:	30 91 ed 00 	lds	r19, 0x00ED
 6bc:	3d 7f       	andi	r19, 0xFD	; 253
 6be:	30 93 ed 00 	sts	0x00ED, r19
 6c2:	30 91 eb 00 	lds	r19, 0x00EB
 6c6:	31 60       	ori	r19, 0x01	; 1
 6c8:	30 93 eb 00 	sts	0x00EB, r19
 6cc:	70 93 ec 00 	sts	0x00EC, r23
 6d0:	20 93 ed 00 	sts	0x00ED, r18
 6d4:	50 93 f0 00 	sts	0x00F0, r21
 6d8:	20 91 ee 00 	lds	r18, 0x00EE
 6dc:	27 ff       	sbrs	r18, 7
 6de:	07 c0       	rjmp	.+14     	; 0x6ee <Endpoint_ConfigureEndpoint_Prv+0x66>
 6e0:	9f 5f       	subi	r25, 0xFF	; 255
 6e2:	d3 cf       	rjmp	.-90     	; 0x68a <Endpoint_ConfigureEndpoint_Prv+0x2>
 6e4:	8f 70       	andi	r24, 0x0F	; 15
 6e6:	80 93 e9 00 	sts	0x00E9, r24
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	08 95       	ret
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	08 95       	ret

000006f2 <Endpoint_ConfigureEndpointTable>:
 6f2:	ef 92       	push	r14
 6f4:	ff 92       	push	r15
 6f6:	0f 93       	push	r16
 6f8:	1f 93       	push	r17
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	e6 2e       	mov	r14, r22
 700:	ec 01       	movw	r28, r24
 702:	8c 01       	movw	r16, r24
 704:	0c 5f       	subi	r16, 0xFC	; 252
 706:	1f 4f       	sbci	r17, 0xFF	; 255
 708:	f1 2c       	mov	r15, r1
 70a:	fe 14       	cp	r15, r14
 70c:	91 f1       	breq	.+100    	; 0x772 <Endpoint_ConfigureEndpointTable+0x80>
 70e:	58 81       	ld	r21, Y
 710:	55 23       	and	r21, r21
 712:	51 f1       	breq	.+84     	; 0x768 <Endpoint_ConfigureEndpointTable+0x76>
 714:	f8 01       	movw	r30, r16
 716:	20 81       	ld	r18, Z
 718:	69 81       	ldd	r22, Y+1	; 0x01
 71a:	7a 81       	ldd	r23, Y+2	; 0x02
 71c:	31 97       	sbiw	r30, 0x01	; 1
 71e:	90 81       	ld	r25, Z
 720:	85 2f       	mov	r24, r21
 722:	8f 70       	andi	r24, 0x0F	; 15
 724:	87 30       	cpi	r24, 0x07	; 7
 726:	10 f0       	brcs	.+4      	; 0x72c <Endpoint_ConfigureEndpointTable+0x3a>
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	24 c0       	rjmp	.+72     	; 0x774 <Endpoint_ConfigureEndpointTable+0x82>
 72c:	22 30       	cpi	r18, 0x02	; 2
 72e:	10 f4       	brcc	.+4      	; 0x734 <Endpoint_ConfigureEndpointTable+0x42>
 730:	42 e0       	ldi	r20, 0x02	; 2
 732:	01 c0       	rjmp	.+2      	; 0x736 <Endpoint_ConfigureEndpointTable+0x44>
 734:	46 e0       	ldi	r20, 0x06	; 6
 736:	e8 e0       	ldi	r30, 0x08	; 8
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	20 e0       	ldi	r18, 0x00	; 0
 73c:	e6 17       	cp	r30, r22
 73e:	f7 07       	cpc	r31, r23
 740:	20 f4       	brcc	.+8      	; 0x74a <Endpoint_ConfigureEndpointTable+0x58>
 742:	2f 5f       	subi	r18, 0xFF	; 255
 744:	ee 0f       	add	r30, r30
 746:	ff 1f       	adc	r31, r31
 748:	f9 cf       	rjmp	.-14     	; 0x73c <Endpoint_ConfigureEndpointTable+0x4a>
 74a:	22 95       	swap	r18
 74c:	20 7f       	andi	r18, 0xF0	; 240
 74e:	42 2b       	or	r20, r18
 750:	f0 e4       	ldi	r31, 0x40	; 64
 752:	9f 9f       	mul	r25, r31
 754:	90 01       	movw	r18, r0
 756:	11 24       	eor	r1, r1
 758:	55 1f       	adc	r21, r21
 75a:	55 27       	eor	r21, r21
 75c:	55 1f       	adc	r21, r21
 75e:	65 2f       	mov	r22, r21
 760:	62 2b       	or	r22, r18
 762:	92 df       	rcall	.-220    	; 0x688 <Endpoint_ConfigureEndpoint_Prv>
 764:	88 23       	and	r24, r24
 766:	01 f3       	breq	.-64     	; 0x728 <Endpoint_ConfigureEndpointTable+0x36>
 768:	f3 94       	inc	r15
 76a:	25 96       	adiw	r28, 0x05	; 5
 76c:	0b 5f       	subi	r16, 0xFB	; 251
 76e:	1f 4f       	sbci	r17, 0xFF	; 255
 770:	cc cf       	rjmp	.-104    	; 0x70a <Endpoint_ConfigureEndpointTable+0x18>
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	df 91       	pop	r29
 776:	cf 91       	pop	r28
 778:	1f 91       	pop	r17
 77a:	0f 91       	pop	r16
 77c:	ff 90       	pop	r15
 77e:	ef 90       	pop	r14
 780:	08 95       	ret

00000782 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 782:	80 91 11 01 	lds	r24, 0x0111
 786:	87 ff       	sbrs	r24, 7
 788:	11 c0       	rjmp	.+34     	; 0x7ac <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 78a:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
 78e:	82 fd       	sbrc	r24, 2
 790:	05 c0       	rjmp	.+10     	; 0x79c <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 792:	80 91 10 01 	lds	r24, 0x0110
 796:	81 11       	cpse	r24, r1
 798:	f8 cf       	rjmp	.-16     	; 0x78a <Endpoint_ClearStatusStage+0x8>
 79a:	11 c0       	rjmp	.+34     	; 0x7be <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 79c:	80 91 e8 00 	lds	r24, 0x00E8
 7a0:	8b 77       	andi	r24, 0x7B	; 123
 7a2:	0b c0       	rjmp	.+22     	; 0x7ba <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 7a4:	80 91 10 01 	lds	r24, 0x0110
 7a8:	88 23       	and	r24, r24
 7aa:	49 f0       	breq	.+18     	; 0x7be <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7ac:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 7b0:	80 ff       	sbrs	r24, 0
 7b2:	f8 cf       	rjmp	.-16     	; 0x7a4 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7b4:	80 91 e8 00 	lds	r24, 0x00E8
 7b8:	8e 77       	andi	r24, 0x7E	; 126
 7ba:	80 93 e8 00 	sts	0x00E8, r24
 7be:	08 95       	ret

000007c0 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 7c0:	20 91 e4 00 	lds	r18, 0x00E4
 7c4:	30 91 e5 00 	lds	r19, 0x00E5
 7c8:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 7ca:	40 91 ec 00 	lds	r20, 0x00EC
 7ce:	84 2f       	mov	r24, r20
 7d0:	81 70       	andi	r24, 0x01	; 1
 7d2:	40 ff       	sbrs	r20, 0
 7d4:	22 c0       	rjmp	.+68     	; 0x81a <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7d6:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 7da:	80 fd       	sbrc	r24, 0
 7dc:	1c c0       	rjmp	.+56     	; 0x816 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7de:	80 91 10 01 	lds	r24, 0x0110

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7e2:	88 23       	and	r24, r24
 7e4:	91 f0       	breq	.+36     	; 0x80a <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7e6:	85 30       	cpi	r24, 0x05	; 5
 7e8:	91 f0       	breq	.+36     	; 0x80e <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 7ea:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 7ee:	85 fd       	sbrc	r24, 5
 7f0:	10 c0       	rjmp	.+32     	; 0x812 <Endpoint_WaitUntilReady+0x52>
 7f2:	40 91 e4 00 	lds	r20, 0x00E4
 7f6:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 7fa:	42 17       	cp	r20, r18
 7fc:	53 07       	cpc	r21, r19
 7fe:	29 f3       	breq	.-54     	; 0x7ca <Endpoint_WaitUntilReady+0xa>
 800:	9a 01       	movw	r18, r20
 802:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 804:	11 f7       	brne	.-60     	; 0x7ca <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 806:	84 e0       	ldi	r24, 0x04	; 4
 808:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 80a:	82 e0       	ldi	r24, 0x02	; 2
 80c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 80e:	83 e0       	ldi	r24, 0x03	; 3
 810:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 816:	80 e0       	ldi	r24, 0x00	; 0
 818:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 81a:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 81e:	42 ff       	sbrs	r20, 2
 820:	de cf       	rjmp	.-68     	; 0x7de <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 822:	08 95       	ret

00000824 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 824:	0f 93       	push	r16
 826:	1f 93       	push	r17
 828:	cf 93       	push	r28
 82a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 82c:	4b d0       	rcall	.+150    	; 0x8c4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 82e:	52 d0       	rcall	.+164    	; 0x8d4 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 830:	c8 ed       	ldi	r28, 0xD8	; 216
 832:	d0 e0       	ldi	r29, 0x00	; 0
 834:	88 81       	ld	r24, Y
 836:	8f 77       	andi	r24, 0x7F	; 127
 838:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
 83a:	88 81       	ld	r24, Y
 83c:	80 68       	ori	r24, 0x80	; 128
 83e:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 840:	88 81       	ld	r24, Y
 842:	8f 7d       	andi	r24, 0xDF	; 223
 844:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 846:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 848:	10 92 10 01 	sts	0x0110, r1
	USB_Device_ConfigurationNumber  = 0;
 84c:	10 92 0c 01 	sts	0x010C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 850:	10 92 0e 01 	sts	0x010E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 854:	10 92 0d 01 	sts	0x010D, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 858:	00 ee       	ldi	r16, 0xE0	; 224
 85a:	10 e0       	ldi	r17, 0x00	; 0
 85c:	f8 01       	movw	r30, r16
 85e:	80 81       	ld	r24, Z
 860:	8b 7f       	andi	r24, 0xFB	; 251
 862:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 864:	88 81       	ld	r24, Y
 866:	81 60       	ori	r24, 0x01	; 1
 868:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 86a:	42 e0       	ldi	r20, 0x02	; 2
 86c:	60 e0       	ldi	r22, 0x00	; 0
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	0b df       	rcall	.-490    	; 0x688 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 872:	e1 ee       	ldi	r30, 0xE1	; 225
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	80 81       	ld	r24, Z
 878:	8e 7f       	andi	r24, 0xFE	; 254
 87a:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 87c:	e2 ee       	ldi	r30, 0xE2	; 226
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	80 81       	ld	r24, Z
 882:	81 60       	ori	r24, 0x01	; 1
 884:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 886:	80 81       	ld	r24, Z
 888:	88 60       	ori	r24, 0x08	; 8
 88a:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 88c:	f8 01       	movw	r30, r16
 88e:	80 81       	ld	r24, Z
 890:	8e 7f       	andi	r24, 0xFE	; 254
 892:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 894:	88 81       	ld	r24, Y
 896:	80 61       	ori	r24, 0x10	; 16
 898:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 89a:	df 91       	pop	r29
 89c:	cf 91       	pop	r28
 89e:	1f 91       	pop	r17
 8a0:	0f 91       	pop	r16
 8a2:	08 95       	ret

000008a4 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 8a4:	e8 ed       	ldi	r30, 0xD8	; 216
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	80 81       	ld	r24, Z
 8aa:	8f 7e       	andi	r24, 0xEF	; 239
 8ac:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 8ae:	e7 ed       	ldi	r30, 0xD7	; 215
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	80 81       	ld	r24, Z
 8b4:	81 60       	ori	r24, 0x01	; 1
 8b6:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
 8b8:	84 e0       	ldi	r24, 0x04	; 4
 8ba:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	80 93 0f 01 	sts	0x010F, r24

	USB_ResetInterface();
 8c2:	b0 cf       	rjmp	.-160    	; 0x824 <USB_ResetInterface>

000008c4 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
 8c4:	e8 ed       	ldi	r30, 0xD8	; 216
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	80 81       	ld	r24, Z
 8ca:	8e 7f       	andi	r24, 0xFE	; 254
 8cc:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 8ce:	10 92 e2 00 	sts	0x00E2, r1
 8d2:	08 95       	ret

000008d4 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 8d4:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 8d8:	10 92 e1 00 	sts	0x00E1, r1
 8dc:	08 95       	ret

000008de <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 8de:	1f 92       	push	r1
 8e0:	0f 92       	push	r0
 8e2:	0f b6       	in	r0, 0x3f	; 63
 8e4:	0f 92       	push	r0
 8e6:	11 24       	eor	r1, r1
 8e8:	2f 93       	push	r18
 8ea:	3f 93       	push	r19
 8ec:	4f 93       	push	r20
 8ee:	5f 93       	push	r21
 8f0:	6f 93       	push	r22
 8f2:	7f 93       	push	r23
 8f4:	8f 93       	push	r24
 8f6:	9f 93       	push	r25
 8f8:	af 93       	push	r26
 8fa:	bf 93       	push	r27
 8fc:	ef 93       	push	r30
 8fe:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 900:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 904:	82 ff       	sbrs	r24, 2
 906:	0a c0       	rjmp	.+20     	; 0x91c <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 908:	80 91 e2 00 	lds	r24, 0x00E2
 90c:	82 ff       	sbrs	r24, 2
 90e:	06 c0       	rjmp	.+12     	; 0x91c <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 910:	80 91 e1 00 	lds	r24, 0x00E1
 914:	8b 7f       	andi	r24, 0xFB	; 251
 916:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 91a:	f9 d1       	rcall	.+1010   	; 0xd0e <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 91c:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 920:	80 ff       	sbrs	r24, 0
 922:	1d c0       	rjmp	.+58     	; 0x95e <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 924:	80 91 d8 00 	lds	r24, 0x00D8
 928:	80 ff       	sbrs	r24, 0
 92a:	19 c0       	rjmp	.+50     	; 0x95e <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 92c:	80 91 da 00 	lds	r24, 0x00DA
 930:	8e 7f       	andi	r24, 0xFE	; 254
 932:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 936:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 93a:	80 ff       	sbrs	r24, 0
 93c:	0c c0       	rjmp	.+24     	; 0x956 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 93e:	80 e1       	ldi	r24, 0x10	; 16
 940:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 942:	82 e1       	ldi	r24, 0x12	; 18
 944:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 946:	09 b4       	in	r0, 0x29	; 41
 948:	00 fe       	sbrs	r0, 0
 94a:	fd cf       	rjmp	.-6      	; 0x946 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	80 93 10 01 	sts	0x0110, r24
			EVENT_USB_Device_Connect();
 952:	0a dd       	rcall	.-1516   	; 0x368 <EVENT_USB_Device_Connect>
 954:	04 c0       	rjmp	.+8      	; 0x95e <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 956:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 958:	10 92 10 01 	sts	0x0110, r1
			EVENT_USB_Device_Disconnect();
 95c:	06 dd       	rcall	.-1524   	; 0x36a <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 95e:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 962:	80 ff       	sbrs	r24, 0
 964:	18 c0       	rjmp	.+48     	; 0x996 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 966:	80 91 e2 00 	lds	r24, 0x00E2
 96a:	80 ff       	sbrs	r24, 0
 96c:	14 c0       	rjmp	.+40     	; 0x996 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 96e:	80 91 e2 00 	lds	r24, 0x00E2
 972:	8e 7f       	andi	r24, 0xFE	; 254
 974:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 978:	80 91 e2 00 	lds	r24, 0x00E2
 97c:	80 61       	ori	r24, 0x10	; 16
 97e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 982:	80 91 d8 00 	lds	r24, 0x00D8
 986:	80 62       	ori	r24, 0x20	; 32
 988:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 98c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 98e:	85 e0       	ldi	r24, 0x05	; 5
 990:	80 93 10 01 	sts	0x0110, r24
		EVENT_USB_Device_Suspend();
 994:	bc d1       	rcall	.+888    	; 0xd0e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 996:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 99a:	84 ff       	sbrs	r24, 4
 99c:	2f c0       	rjmp	.+94     	; 0x9fc <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 99e:	80 91 e2 00 	lds	r24, 0x00E2
 9a2:	84 ff       	sbrs	r24, 4
 9a4:	2b c0       	rjmp	.+86     	; 0x9fc <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 9a6:	80 e1       	ldi	r24, 0x10	; 16
 9a8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 9aa:	82 e1       	ldi	r24, 0x12	; 18
 9ac:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 9ae:	09 b4       	in	r0, 0x29	; 41
 9b0:	00 fe       	sbrs	r0, 0
 9b2:	fd cf       	rjmp	.-6      	; 0x9ae <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 9b4:	80 91 d8 00 	lds	r24, 0x00D8
 9b8:	8f 7d       	andi	r24, 0xDF	; 223
 9ba:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 9be:	80 91 e1 00 	lds	r24, 0x00E1
 9c2:	8f 7e       	andi	r24, 0xEF	; 239
 9c4:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 9c8:	80 91 e2 00 	lds	r24, 0x00E2
 9cc:	8f 7e       	andi	r24, 0xEF	; 239
 9ce:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 9d2:	80 91 e2 00 	lds	r24, 0x00E2
 9d6:	81 60       	ori	r24, 0x01	; 1
 9d8:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 9dc:	80 91 0c 01 	lds	r24, 0x010C
 9e0:	88 23       	and	r24, r24
 9e2:	11 f0       	breq	.+4      	; 0x9e8 <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
 9e4:	84 e0       	ldi	r24, 0x04	; 4
 9e6:	07 c0       	rjmp	.+14     	; 0x9f6 <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 9e8:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 9ec:	87 fd       	sbrc	r24, 7
 9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <__vector_10+0x116>
 9f0:	81 e0       	ldi	r24, 0x01	; 1
 9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <__vector_10+0x118>
 9f4:	83 e0       	ldi	r24, 0x03	; 3
 9f6:	80 93 10 01 	sts	0x0110, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 9fa:	89 d1       	rcall	.+786    	; 0xd0e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 9fc:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 a00:	83 ff       	sbrs	r24, 3
 a02:	22 c0       	rjmp	.+68     	; 0xa48 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 a04:	80 91 e2 00 	lds	r24, 0x00E2
 a08:	83 ff       	sbrs	r24, 3
 a0a:	1e c0       	rjmp	.+60     	; 0xa48 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 a0c:	80 91 e1 00 	lds	r24, 0x00E1
 a10:	87 7f       	andi	r24, 0xF7	; 247
 a12:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 a16:	82 e0       	ldi	r24, 0x02	; 2
 a18:	80 93 10 01 	sts	0x0110, r24
		USB_Device_ConfigurationNumber = 0;
 a1c:	10 92 0c 01 	sts	0x010C, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 a20:	80 91 e1 00 	lds	r24, 0x00E1
 a24:	8e 7f       	andi	r24, 0xFE	; 254
 a26:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a2a:	80 91 e2 00 	lds	r24, 0x00E2
 a2e:	8e 7f       	andi	r24, 0xFE	; 254
 a30:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a34:	80 91 e2 00 	lds	r24, 0x00E2
 a38:	80 61       	ori	r24, 0x10	; 16
 a3a:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 a3e:	42 e0       	ldi	r20, 0x02	; 2
 a40:	60 e0       	ldi	r22, 0x00	; 0
 a42:	80 e0       	ldi	r24, 0x00	; 0
 a44:	21 de       	rcall	.-958    	; 0x688 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 a46:	63 d1       	rcall	.+710    	; 0xd0e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 a48:	ff 91       	pop	r31
 a4a:	ef 91       	pop	r30
 a4c:	bf 91       	pop	r27
 a4e:	af 91       	pop	r26
 a50:	9f 91       	pop	r25
 a52:	8f 91       	pop	r24
 a54:	7f 91       	pop	r23
 a56:	6f 91       	pop	r22
 a58:	5f 91       	pop	r21
 a5a:	4f 91       	pop	r20
 a5c:	3f 91       	pop	r19
 a5e:	2f 91       	pop	r18
 a60:	0f 90       	pop	r0
 a62:	0f be       	out	0x3f, r0	; 63
 a64:	0f 90       	pop	r0
 a66:	1f 90       	pop	r1
 a68:	18 95       	reti

00000a6a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a6a:	1f 93       	push	r17
 a6c:	cf 93       	push	r28
 a6e:	df 93       	push	r29
 a70:	cd b7       	in	r28, 0x3d	; 61
 a72:	de b7       	in	r29, 0x3e	; 62
 a74:	aa 97       	sbiw	r28, 0x2a	; 42
 a76:	0f b6       	in	r0, 0x3f	; 63
 a78:	f8 94       	cli
 a7a:	de bf       	out	0x3e, r29	; 62
 a7c:	0f be       	out	0x3f, r0	; 63
 a7e:	cd bf       	out	0x3d, r28	; 61
 a80:	e1 e1       	ldi	r30, 0x11	; 17
 a82:	f1 e0       	ldi	r31, 0x01	; 1
 a84:	88 e0       	ldi	r24, 0x08	; 8
 a86:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 a88:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 a8c:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a8e:	8e 13       	cpse	r24, r30
 a90:	fb cf       	rjmp	.-10     	; 0xa88 <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 a92:	6f dc       	rcall	.-1826   	; 0x372 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a94:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 a98:	83 ff       	sbrs	r24, 3
 a9a:	21 c1       	rjmp	.+578    	; 0xcde <__stack+0x1df>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a9c:	80 91 11 01 	lds	r24, 0x0111

		switch (USB_ControlRequest.bRequest)
 aa0:	90 91 12 01 	lds	r25, 0x0112
 aa4:	95 30       	cpi	r25, 0x05	; 5
 aa6:	09 f4       	brne	.+2      	; 0xaaa <USB_Device_ProcessControlRequest+0x40>
 aa8:	78 c0       	rjmp	.+240    	; 0xb9a <__stack+0x9b>
 aaa:	30 f4       	brcc	.+12     	; 0xab8 <USB_Device_ProcessControlRequest+0x4e>
 aac:	91 30       	cpi	r25, 0x01	; 1
 aae:	81 f1       	breq	.+96     	; 0xb10 <__stack+0x11>
 ab0:	68 f0       	brcs	.+26     	; 0xacc <USB_Device_ProcessControlRequest+0x62>
 ab2:	93 30       	cpi	r25, 0x03	; 3
 ab4:	69 f1       	breq	.+90     	; 0xb10 <__stack+0x11>
 ab6:	13 c1       	rjmp	.+550    	; 0xcde <__stack+0x1df>
 ab8:	98 30       	cpi	r25, 0x08	; 8
 aba:	09 f4       	brne	.+2      	; 0xabe <USB_Device_ProcessControlRequest+0x54>
 abc:	e2 c0       	rjmp	.+452    	; 0xc82 <__stack+0x183>
 abe:	99 30       	cpi	r25, 0x09	; 9
 ac0:	09 f4       	brne	.+2      	; 0xac4 <USB_Device_ProcessControlRequest+0x5a>
 ac2:	f1 c0       	rjmp	.+482    	; 0xca6 <__stack+0x1a7>
 ac4:	96 30       	cpi	r25, 0x06	; 6
 ac6:	09 f0       	breq	.+2      	; 0xaca <USB_Device_ProcessControlRequest+0x60>
 ac8:	0a c1       	rjmp	.+532    	; 0xcde <__stack+0x1df>
 aca:	89 c0       	rjmp	.+274    	; 0xbde <__stack+0xdf>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 acc:	80 38       	cpi	r24, 0x80	; 128
 ace:	81 f0       	breq	.+32     	; 0xaf0 <USB_Device_ProcessControlRequest+0x86>
 ad0:	82 38       	cpi	r24, 0x82	; 130
 ad2:	09 f0       	breq	.+2      	; 0xad6 <USB_Device_ProcessControlRequest+0x6c>
 ad4:	04 c1       	rjmp	.+520    	; 0xcde <__stack+0x1df>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ad6:	80 91 15 01 	lds	r24, 0x0115
 ada:	8f 70       	andi	r24, 0x0F	; 15
 adc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 ae0:	80 91 eb 00 	lds	r24, 0x00EB
 ae4:	85 fb       	bst	r24, 5
 ae6:	88 27       	eor	r24, r24
 ae8:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 aea:	10 92 e9 00 	sts	0x00E9, r1
 aee:	06 c0       	rjmp	.+12     	; 0xafc <USB_Device_ProcessControlRequest+0x92>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 af0:	80 91 0d 01 	lds	r24, 0x010D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 af4:	90 91 0e 01 	lds	r25, 0x010E
 af8:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 afa:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 afc:	90 91 e8 00 	lds	r25, 0x00E8
 b00:	97 7f       	andi	r25, 0xF7	; 247
 b02:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 b06:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 b0a:	10 92 f1 00 	sts	0x00F1, r1
 b0e:	c4 c0       	rjmp	.+392    	; 0xc98 <__stack+0x199>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b10:	28 2f       	mov	r18, r24
 b12:	2d 7f       	andi	r18, 0xFD	; 253
 b14:	09 f0       	breq	.+2      	; 0xb18 <__stack+0x19>
 b16:	e3 c0       	rjmp	.+454    	; 0xcde <__stack+0x1df>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 b18:	88 23       	and	r24, r24
 b1a:	19 f0       	breq	.+6      	; 0xb22 <__stack+0x23>
 b1c:	82 30       	cpi	r24, 0x02	; 2
 b1e:	61 f0       	breq	.+24     	; 0xb38 <__stack+0x39>
 b20:	de c0       	rjmp	.+444    	; 0xcde <__stack+0x1df>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 b22:	80 91 13 01 	lds	r24, 0x0113
 b26:	81 30       	cpi	r24, 0x01	; 1
 b28:	09 f0       	breq	.+2      	; 0xb2c <__stack+0x2d>
 b2a:	d9 c0       	rjmp	.+434    	; 0xcde <__stack+0x1df>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 b2c:	93 30       	cpi	r25, 0x03	; 3
 b2e:	09 f0       	breq	.+2      	; 0xb32 <__stack+0x33>
 b30:	80 e0       	ldi	r24, 0x00	; 0
 b32:	80 93 0e 01 	sts	0x010E, r24
 b36:	2b c0       	rjmp	.+86     	; 0xb8e <__stack+0x8f>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 b38:	80 91 13 01 	lds	r24, 0x0113
 b3c:	81 11       	cpse	r24, r1
 b3e:	27 c0       	rjmp	.+78     	; 0xb8e <__stack+0x8f>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b40:	80 91 15 01 	lds	r24, 0x0115
 b44:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 b46:	09 f4       	brne	.+2      	; 0xb4a <__stack+0x4b>
 b48:	ca c0       	rjmp	.+404    	; 0xcde <__stack+0x1df>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b4a:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 b4e:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b52:	20 ff       	sbrs	r18, 0
 b54:	1c c0       	rjmp	.+56     	; 0xb8e <__stack+0x8f>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b56:	93 30       	cpi	r25, 0x03	; 3
 b58:	21 f4       	brne	.+8      	; 0xb62 <__stack+0x63>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b5a:	80 91 eb 00 	lds	r24, 0x00EB
 b5e:	80 62       	ori	r24, 0x20	; 32
 b60:	14 c0       	rjmp	.+40     	; 0xb8a <__stack+0x8b>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b62:	90 91 eb 00 	lds	r25, 0x00EB
 b66:	90 61       	ori	r25, 0x10	; 16
 b68:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 b6c:	21 e0       	ldi	r18, 0x01	; 1
 b6e:	30 e0       	ldi	r19, 0x00	; 0
 b70:	a9 01       	movw	r20, r18
 b72:	02 c0       	rjmp	.+4      	; 0xb78 <__stack+0x79>
 b74:	44 0f       	add	r20, r20
 b76:	55 1f       	adc	r21, r21
 b78:	8a 95       	dec	r24
 b7a:	e2 f7       	brpl	.-8      	; 0xb74 <__stack+0x75>
 b7c:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
 b80:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b84:	80 91 eb 00 	lds	r24, 0x00EB
 b88:	88 60       	ori	r24, 0x08	; 8
 b8a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b8e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b92:	80 91 e8 00 	lds	r24, 0x00E8
 b96:	87 7f       	andi	r24, 0xF7	; 247
 b98:	82 c0       	rjmp	.+260    	; 0xc9e <__stack+0x19f>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b9a:	81 11       	cpse	r24, r1
 b9c:	a0 c0       	rjmp	.+320    	; 0xcde <__stack+0x1df>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b9e:	10 91 13 01 	lds	r17, 0x0113
 ba2:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 ba4:	80 91 e3 00 	lds	r24, 0x00E3
 ba8:	80 78       	andi	r24, 0x80	; 128
 baa:	81 2b       	or	r24, r17
 bac:	80 93 e3 00 	sts	0x00E3, r24
 bb0:	80 91 e8 00 	lds	r24, 0x00E8
 bb4:	87 7f       	andi	r24, 0xF7	; 247
 bb6:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 bba:	e3 dd       	rcall	.-1082   	; 0x782 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 bbc:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 bc0:	80 ff       	sbrs	r24, 0
 bc2:	fc cf       	rjmp	.-8      	; 0xbbc <__stack+0xbd>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 bc4:	80 91 e3 00 	lds	r24, 0x00E3
 bc8:	80 68       	ori	r24, 0x80	; 128
 bca:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 bce:	11 11       	cpse	r17, r1
 bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <__stack+0xd7>
 bd2:	82 e0       	ldi	r24, 0x02	; 2
 bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <__stack+0xd9>
 bd6:	83 e0       	ldi	r24, 0x03	; 3
 bd8:	80 93 10 01 	sts	0x0110, r24
 bdc:	80 c0       	rjmp	.+256    	; 0xcde <__stack+0x1df>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 bde:	80 58       	subi	r24, 0x80	; 128
 be0:	82 30       	cpi	r24, 0x02	; 2
 be2:	08 f0       	brcs	.+2      	; 0xbe6 <__stack+0xe7>
 be4:	7c c0       	rjmp	.+248    	; 0xcde <__stack+0x1df>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 be6:	80 91 13 01 	lds	r24, 0x0113
 bea:	90 91 14 01 	lds	r25, 0x0114
 bee:	8c 3d       	cpi	r24, 0xDC	; 220
 bf0:	53 e0       	ldi	r21, 0x03	; 3
 bf2:	95 07       	cpc	r25, r21
 bf4:	71 f5       	brne	.+92     	; 0xc52 <__stack+0x153>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 bf6:	83 e0       	ldi	r24, 0x03	; 3
 bf8:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 bfa:	8a e2       	ldi	r24, 0x2A	; 42
 bfc:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 bfe:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 c00:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 c02:	de 01       	movw	r26, r28
 c04:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c06:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 c08:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 c0a:	51 e2       	ldi	r21, 0x21	; 33
 c0c:	e3 2f       	mov	r30, r19
 c0e:	f0 e0       	ldi	r31, 0x00	; 0
 c10:	50 93 57 00 	sts	0x0057, r21
 c14:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 c16:	20 ff       	sbrs	r18, 0
 c18:	03 c0       	rjmp	.+6      	; 0xc20 <__stack+0x121>
					{
						SerialByte >>= 4;
 c1a:	e2 95       	swap	r30
 c1c:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 c1e:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 c20:	ef 70       	andi	r30, 0x0F	; 15
 c22:	8e 2f       	mov	r24, r30
 c24:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 c26:	ea 30       	cpi	r30, 0x0A	; 10
 c28:	10 f0       	brcs	.+4      	; 0xc2e <__stack+0x12f>
 c2a:	c7 96       	adiw	r24, 0x37	; 55
 c2c:	01 c0       	rjmp	.+2      	; 0xc30 <__stack+0x131>
 c2e:	c0 96       	adiw	r24, 0x30	; 48
 c30:	8d 93       	st	X+, r24
 c32:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c34:	2f 5f       	subi	r18, 0xFF	; 255
 c36:	24 31       	cpi	r18, 0x14	; 20
 c38:	49 f7       	brne	.-46     	; 0xc0c <__stack+0x10d>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 c3a:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c3c:	80 91 e8 00 	lds	r24, 0x00E8
 c40:	87 7f       	andi	r24, 0xF7	; 247
 c42:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 c46:	6a e2       	ldi	r22, 0x2A	; 42
 c48:	70 e0       	ldi	r23, 0x00	; 0
 c4a:	ce 01       	movw	r24, r28
 c4c:	01 96       	adiw	r24, 0x01	; 1
 c4e:	58 dc       	rcall	.-1872   	; 0x500 <Endpoint_Write_Control_Stream_LE>
 c50:	12 c0       	rjmp	.+36     	; 0xc76 <__stack+0x177>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c52:	ae 01       	movw	r20, r28
 c54:	4f 5f       	subi	r20, 0xFF	; 255
 c56:	5f 4f       	sbci	r21, 0xFF	; 255
 c58:	60 91 15 01 	lds	r22, 0x0115
 c5c:	8b db       	rcall	.-2282   	; 0x374 <CALLBACK_USB_GetDescriptor>
 c5e:	bc 01       	movw	r22, r24
 c60:	89 2b       	or	r24, r25
 c62:	09 f4       	brne	.+2      	; 0xc66 <__stack+0x167>
 c64:	3c c0       	rjmp	.+120    	; 0xcde <__stack+0x1df>
 c66:	90 91 e8 00 	lds	r25, 0x00E8
 c6a:	97 7f       	andi	r25, 0xF7	; 247
 c6c:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c70:	89 81       	ldd	r24, Y+1	; 0x01
 c72:	9a 81       	ldd	r25, Y+2	; 0x02
 c74:	a8 dc       	rcall	.-1712   	; 0x5c6 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c76:	80 91 e8 00 	lds	r24, 0x00E8
 c7a:	8b 77       	andi	r24, 0x7B	; 123
 c7c:	80 93 e8 00 	sts	0x00E8, r24
 c80:	2e c0       	rjmp	.+92     	; 0xcde <__stack+0x1df>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c82:	80 38       	cpi	r24, 0x80	; 128
 c84:	61 f5       	brne	.+88     	; 0xcde <__stack+0x1df>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c86:	80 91 e8 00 	lds	r24, 0x00E8
 c8a:	87 7f       	andi	r24, 0xF7	; 247
 c8c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 c90:	80 91 0c 01 	lds	r24, 0x010C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 c94:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c98:	80 91 e8 00 	lds	r24, 0x00E8
 c9c:	8e 77       	andi	r24, 0x7E	; 126
 c9e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 ca2:	6f dd       	rcall	.-1314   	; 0x782 <Endpoint_ClearStatusStage>
 ca4:	1c c0       	rjmp	.+56     	; 0xcde <__stack+0x1df>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ca6:	81 11       	cpse	r24, r1
 ca8:	1a c0       	rjmp	.+52     	; 0xcde <__stack+0x1df>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 caa:	90 91 13 01 	lds	r25, 0x0113
 cae:	92 30       	cpi	r25, 0x02	; 2
 cb0:	b0 f4       	brcc	.+44     	; 0xcde <__stack+0x1df>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cb2:	80 91 e8 00 	lds	r24, 0x00E8
 cb6:	87 7f       	andi	r24, 0xF7	; 247
 cb8:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 cbc:	90 93 0c 01 	sts	0x010C, r25

	Endpoint_ClearStatusStage();
 cc0:	60 dd       	rcall	.-1344   	; 0x782 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 cc2:	80 91 0c 01 	lds	r24, 0x010C
 cc6:	81 11       	cpse	r24, r1
 cc8:	06 c0       	rjmp	.+12     	; 0xcd6 <__stack+0x1d7>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 cca:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 cce:	87 fd       	sbrc	r24, 7
 cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <__stack+0x1d7>
 cd2:	81 e0       	ldi	r24, 0x01	; 1
 cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <__stack+0x1d9>
 cd6:	84 e0       	ldi	r24, 0x04	; 4
 cd8:	80 93 10 01 	sts	0x0110, r24

	EVENT_USB_Device_ConfigurationChanged();
 cdc:	47 db       	rcall	.-2418   	; 0x36c <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cde:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 ce2:	83 ff       	sbrs	r24, 3
 ce4:	0a c0       	rjmp	.+20     	; 0xcfa <__stack+0x1fb>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ce6:	80 91 e8 00 	lds	r24, 0x00E8
 cea:	87 7f       	andi	r24, 0xF7	; 247
 cec:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 cf0:	80 91 eb 00 	lds	r24, 0x00EB
 cf4:	80 62       	ori	r24, 0x20	; 32
 cf6:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 cfa:	aa 96       	adiw	r28, 0x2a	; 42
 cfc:	0f b6       	in	r0, 0x3f	; 63
 cfe:	f8 94       	cli
 d00:	de bf       	out	0x3e, r29	; 62
 d02:	0f be       	out	0x3f, r0	; 63
 d04:	cd bf       	out	0x3d, r28	; 61
 d06:	df 91       	pop	r29
 d08:	cf 91       	pop	r28
 d0a:	1f 91       	pop	r17
 d0c:	08 95       	ret

00000d0e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 d0e:	08 95       	ret

00000d10 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 d10:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 d12:	80 91 10 01 	lds	r24, 0x0110
 d16:	88 23       	and	r24, r24
 d18:	99 f0       	breq	.+38     	; 0xd40 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d1a:	c0 91 e9 00 	lds	r28, 0x00E9
 d1e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 d20:	90 91 ec 00 	lds	r25, 0x00EC
 d24:	89 2f       	mov	r24, r25
 d26:	81 70       	andi	r24, 0x01	; 1
 d28:	90 fd       	sbrc	r25, 0
 d2a:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d2c:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d2e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d32:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 d36:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 d38:	98 de       	rcall	.-720    	; 0xa6a <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d3a:	cf 70       	andi	r28, 0x0F	; 15
 d3c:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 d40:	cf 91       	pop	r28
 d42:	08 95       	ret

00000d44 <MIDI_Device_ConfigureEndpoints>:
#define  __INCLUDE_FROM_MIDI_DRIVER
#define  __INCLUDE_FROM_MIDI_DEVICE_C
#include "MIDIClassDevice.h"

bool MIDI_Device_ConfigureEndpoints(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 d44:	cf 93       	push	r28
 d46:	df 93       	push	r29
 d48:	ec 01       	movw	r28, r24
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
 d4a:	1b 86       	std	Y+11, r1	; 0x0b

	MIDIInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
 d4c:	82 e0       	ldi	r24, 0x02	; 2
 d4e:	8c 83       	std	Y+4, r24	; 0x04
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
 d50:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
 d52:	61 e0       	ldi	r22, 0x01	; 1
 d54:	ce 01       	movw	r24, r28
 d56:	01 96       	adiw	r24, 0x01	; 1
 d58:	cc dc       	rcall	.-1640   	; 0x6f2 <Endpoint_ConfigureEndpointTable>
 d5a:	88 23       	and	r24, r24
 d5c:	31 f0       	breq	.+12     	; 0xd6a <MIDI_Device_ConfigureEndpoints+0x26>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
 d5e:	61 e0       	ldi	r22, 0x01	; 1
 d60:	ce 01       	movw	r24, r28
 d62:	06 96       	adiw	r24, 0x06	; 6
	  return false;

	return true;
}
 d64:	df 91       	pop	r29
 d66:	cf 91       	pop	r28
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
 d68:	c4 cc       	rjmp	.-1656   	; 0x6f2 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
 d6a:	80 e0       	ldi	r24, 0x00	; 0
 d6c:	df 91       	pop	r29
 d6e:	cf 91       	pop	r28
 d70:	08 95       	ret

00000d72 <MIDI_Device_SendEventPacket>:
}

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d72:	20 91 10 01 	lds	r18, 0x0110
 d76:	24 30       	cpi	r18, 0x04	; 4
 d78:	d1 f4       	brne	.+52     	; 0xdae <MIDI_Device_SendEventPacket+0x3c>
 d7a:	9b 01       	movw	r18, r22
 d7c:	fc 01       	movw	r30, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d7e:	81 81       	ldd	r24, Z+1	; 0x01
 d80:	8f 70       	andi	r24, 0x0F	; 15
 d82:	80 93 e9 00 	sts	0x00E9, r24

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if ((ErrorCode = Endpoint_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != ENDPOINT_RWSTREAM_NoError)
 d86:	40 e0       	ldi	r20, 0x00	; 0
 d88:	50 e0       	ldi	r21, 0x00	; 0
 d8a:	64 e0       	ldi	r22, 0x04	; 4
 d8c:	70 e0       	ldi	r23, 0x00	; 0
 d8e:	c9 01       	movw	r24, r18
 d90:	23 db       	rcall	.-2490   	; 0x3d8 <Endpoint_Write_Stream_LE>
 d92:	81 11       	cpse	r24, r1
 d94:	0f c0       	rjmp	.+30     	; 0xdb4 <MIDI_Device_SendEventPacket+0x42>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d96:	90 91 e8 00 	lds	r25, 0x00E8
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
 d9a:	89 2f       	mov	r24, r25
 d9c:	80 72       	andi	r24, 0x20	; 32
 d9e:	95 fd       	sbrc	r25, 5
 da0:	08 c0       	rjmp	.+16     	; 0xdb2 <MIDI_Device_SendEventPacket+0x40>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 da2:	90 91 e8 00 	lds	r25, 0x00E8
 da6:	9e 77       	andi	r25, 0x7E	; 126
 da8:	90 93 e8 00 	sts	0x00E8, r25
 dac:	08 95       	ret

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 dae:	82 e0       	ldi	r24, 0x02	; 2
 db0:	08 95       	ret
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearIN();

	return ENDPOINT_RWSTREAM_NoError;
 db2:	80 e0       	ldi	r24, 0x00	; 0
}
 db4:	08 95       	ret

00000db6 <MIDI_Device_Flush>:

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 db6:	20 91 10 01 	lds	r18, 0x0110
 dba:	24 30       	cpi	r18, 0x04	; 4
 dbc:	99 f4       	brne	.+38     	; 0xde4 <MIDI_Device_Flush+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 dbe:	fc 01       	movw	r30, r24
 dc0:	81 81       	ldd	r24, Z+1	; 0x01
 dc2:	8f 70       	andi	r24, 0x0F	; 15
 dc4:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 dc8:	20 91 f3 00 	lds	r18, 0x00F3
 dcc:	80 91 f2 00 	lds	r24, 0x00F2
 dd0:	90 e0       	ldi	r25, 0x00	; 0
 dd2:	92 2b       	or	r25, r18

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_BytesInEndpoint())
 dd4:	89 2b       	or	r24, r25
 dd6:	41 f0       	breq	.+16     	; 0xde8 <MIDI_Device_Flush+0x32>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 dd8:	80 91 e8 00 	lds	r24, 0x00E8
 ddc:	8e 77       	andi	r24, 0x7E	; 126
 dde:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 de2:	ee cc       	rjmp	.-1572   	; 0x7c0 <Endpoint_WaitUntilReady>
}

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 de4:	82 e0       	ldi	r24, 0x02	; 2
 de6:	08 95       	ret

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	return ENDPOINT_READYWAIT_NoError;
 de8:	80 e0       	ldi	r24, 0x00	; 0
}
 dea:	08 95       	ret

00000dec <MIDI_Device_USBTask>:

	return true;
}

void MIDI_Device_USBTask(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 dec:	fc 01       	movw	r30, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
 dee:	80 91 10 01 	lds	r24, 0x0110
 df2:	84 30       	cpi	r24, 0x04	; 4
 df4:	51 f4       	brne	.+20     	; 0xe0a <MIDI_Device_USBTask+0x1e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 df6:	91 81       	ldd	r25, Z+1	; 0x01
 df8:	9f 70       	andi	r25, 0x0F	; 15
 dfa:	90 93 e9 00 	sts	0x00E9, r25
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 dfe:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
 e02:	80 ff       	sbrs	r24, 0
 e04:	02 c0       	rjmp	.+4      	; 0xe0a <MIDI_Device_USBTask+0x1e>
	  MIDI_Device_Flush(MIDIInterfaceInfo);
 e06:	cf 01       	movw	r24, r30
 e08:	d6 cf       	rjmp	.-84     	; 0xdb6 <MIDI_Device_Flush>
 e0a:	08 95       	ret

00000e0c <MIDI_Device_ReceiveEventPacket>:
}

bool MIDI_Device_ReceiveEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 e0c:	20 91 10 01 	lds	r18, 0x0110
 e10:	24 30       	cpi	r18, 0x04	; 4
 e12:	11 f0       	breq	.+4      	; 0xe18 <MIDI_Device_ReceiveEventPacket+0xc>
	  return false;
 e14:	80 e0       	ldi	r24, 0x00	; 0
 e16:	08 95       	ret
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e18:	fc 01       	movw	r30, r24
 e1a:	86 81       	ldd	r24, Z+6	; 0x06
 e1c:	8f 70       	andi	r24, 0x0F	; 15
 e1e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 e22:	80 91 e8 00 	lds	r24, 0x00E8

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (!(Endpoint_IsOUTReceived()))
 e26:	82 ff       	sbrs	r24, 2
 e28:	f5 cf       	rjmp	.-22     	; 0xe14 <MIDI_Device_ReceiveEventPacket+0x8>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 e2a:	80 91 e8 00 	lds	r24, 0x00E8
		return false;

	if (!(Endpoint_IsReadWriteAllowed()))
 e2e:	85 ff       	sbrs	r24, 5
 e30:	f1 cf       	rjmp	.-30     	; 0xe14 <MIDI_Device_ReceiveEventPacket+0x8>
 e32:	cb 01       	movw	r24, r22
	  return false;

	Endpoint_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
 e34:	40 e0       	ldi	r20, 0x00	; 0
 e36:	50 e0       	ldi	r21, 0x00	; 0
 e38:	64 e0       	ldi	r22, 0x04	; 4
 e3a:	70 e0       	ldi	r23, 0x00	; 0
 e3c:	17 db       	rcall	.-2514   	; 0x46c <Endpoint_Read_Stream_LE>
 e3e:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
 e42:	85 fd       	sbrc	r24, 5
 e44:	05 c0       	rjmp	.+10     	; 0xe50 <MIDI_Device_ReceiveEventPacket+0x44>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e46:	80 91 e8 00 	lds	r24, 0x00E8
 e4a:	8b 77       	andi	r24, 0x7B	; 123
 e4c:	80 93 e8 00 	sts	0x00E8, r24
	  Endpoint_ClearOUT();

	return true;
 e50:	81 e0       	ldi	r24, 0x01	; 1
}
 e52:	08 95       	ret

00000e54 <_exit>:
 e54:	f8 94       	cli

00000e56 <__stop_program>:
 e56:	ff cf       	rjmp	.-2      	; 0xe56 <__stop_program>
